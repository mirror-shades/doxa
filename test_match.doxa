// unions

const un1 :: int | float is 3;
const un2 :: int | float is 3.14;

fn process_number_union_string(value :: int | float) returns(string) {
    return match value {
        int then "integer"?,
        float then "float"?,
    };
}

process_number_union_string(un1)?; // integer
process_number_union_string(un2)?; // float

fn process_number_union_narrow(value :: int | float) returns(int) {
    return match value {
        int then value,
        float then 0,
    };
}

process_number_union_narrow(un1)?; // 3
process_number_union_narrow(un2)?; // 0

// enums

enum Color {
    Red,
    Green,
    Blue,
}

const color_blue :: Color is .Blue;
const color_green :: Color is .Green;

var enum_result1 is match color_blue {
    .Red then "It's red",
    .Blue then "It's blue",
    else "It's something else",
}; 

enum_result1?; // It's blue

var enum_result2 is match color_green {
    .Red then "It's red",
    .Blue then "It's blue",
    else "It's something else",
};

enum_result2?; // It's something else

// values

const x is 5;

var value_result_num is match x {
    0 then "It's zero",
    5 then "It's five",
    else "It's something else",
}; 

value_result_num?; // It's five

const s is "big";

var value_result_str is match s {
    "big" then "It's big",
    "small" then "It's small",
    else "It's something else",
};

value_result_str?; // It's big


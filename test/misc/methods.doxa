var hello is "hello"
var arr is [1, 2, 3, 4, 5]
var nested is [[1, 2], [3, 4], [5, 6]]
var emptyArr :: int[] is []
var emptyStr is ""
var unicode_str is "caf√©"

enum Species {
    DOG,
    CAT,
    FISH,
}

struct Animal {
    pub name :: string
    pub species :: Species
}

var dog is Animal {
    name is "Spot",
    species is Species.DOG,
}

var map mapping {
    1 is "one",
    2 is "two",
    3 is "three",
}

/////
// LENGTH
/////

@length("hello")?
@length(hello)?
@length([1, 2, 3, 4, 5])?
@length(arr)?
@length("")?
@length([])?
@length([42])?


/////
// PUSH
/////

@push(arr, 6)?
@push(hello, "!")?

@push([1, 2, 3, 4], 5)?
@push("hello", "!")?

hello?
arr?

@push(hello, "")?
@push(emptyArr, 1)?
@push(emptyStr, "!")?

hello?
emptyArr?
emptyStr?


/////
// POP
/////

@pop(arr)?
@pop(hello)?

arr?
hello?

@pop(emptyArr)?
@pop(emptyStr)?

emptyArr?
emptyStr?

@pop(unicode_str)?
unicode_str?

@pop(nested)?
nested?

/////
// CASTING
/////

@int("123")?
@int("123.4")?
@int("0x0A")?
@int("hello")?
@int(123.4)?
@int(0x0A)?
@int(0)?

@float("123")?
@float("123.4")?
@float("0x0A")?
@float("hello")?
@float(123)?
@float(0x0A)?
@float(0)?

@byte("123")?
@byte("123.4")?
@byte("0x0A")?
@byte("hello")?
@byte("a")?
@byte(123.4)?
@byte(0x0A)?
@byte(0)?

@string(123)?
@string(123.4)?
@string(0)?
@string(0x0A)?
@string("hello")?
@string("")?
@string(true)?
@string(both)?
@string(nothing)?
@string(dog)?
@string(dog.name)?
@string(dog.species)?


/////
// TYPE
/////

@type(10)? // int
@type(0x0A)? // byte
@type(10.0)? // float
@type("hello")? // string
@type(both)? // tetra
@type(arr)? // array
@type(nested)? // array
@type(dog)? // struct
@type(dog.name)? // string
@type(dog.species)? // Species
@type(Species.DOG)? // Species
@type(mapping)? // map

/////
// INSERT
/////

@insert(arr, 3, 99)?
arr?

@insert(emptyArr, 0, 1)?
emptyArr?

@insert(emptyStr, 0, "!")?
emptyStr?

@insert(hello, 3, "!")?
hello?

/////
// REMOVE  
/////

@remove(arr, 2)?
arr?

@remove(emptyArr, 0)?
emptyArr?

@remove(emptyStr, 0)?
emptyStr?

@remove(hello, 3)?
hello?


/////
// SLICE
/////

@slice(arr, 1, 3)?
arr?
@slice(emptyArr, 0, 0)?
emptyArr?

@slice(hello, 2, 2)?
hello?
@slice(emptyStr, 0, 0)?
emptyStr?

@slice(arr, 0, 5)?
arr?
@slice(hello, 0, 5)? 
hello?






"end"?
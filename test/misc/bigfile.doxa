// Enums
enum Color {
    Red,
    Green,
    Blue,
}

const b :: Color is .Blue;
const g :: Color is .Green;

var result is match b {
    .Red => "It's red",
    .Blue => "It's blue",
    else => "It's something else",
};

result?; // It's blue

result is match g {
    .Red => "It's red",
    .Blue => "It's blue",
    else => "It's something else",
};

result?; // It's something else


// functions and loops / recursion
function fizzbuzz(x:: int) {
    var current is x;
    while current <= 15 {
        if current % 3 equals 0 and current % 5 equals 0 then "fizzbuzz"?;
        else if current % 3 equals 0 then "fizz"?;
        else if current % 5 equals 0 then "buzz"?;
        else current?;
        
        current += 1;
    }
}

fizzbuzz(1);//fizzbuzz 1-15


fn fber(x:: int) {
    if x % 3 equals 0 and x % 5 equals 0 then "fizzbuzzer"?;
    else if x % 3 equals 0 then "fizzer"?;
    else if x % 5 equals 0 then "buzzer"?;
    else x?;

    if x < 15 then fber(x + 1);
}

fber(1); //fizzerbuzzer 1-15

fn forloop(x :: int) {
    for (var i is 0; i < x; i++) {
        (i+1)?;
    }
}

forloop(5); //just lists 1-5

// return statements
fn return_test() returns(string) {
    return "return";
}

return_test()?; // return


// structs
struct Person {
    name: string,
    age: int,
}

struct Employee {
    person: Person,
    salary: int,
}

var mike is Employee {
    person is Person {
        name is "Mike",
        age is 25,
    },
    salary is 1000,
};

mike.person.age is 26;
mike.person.age?; // 26
//testing length method
mike.person.name.length?;
// //testing index method
mike.person.name[0]?; // M

mike.salary?; // 1000

// Tetras and contradictions
var firstFold :: tetra is true;
var secondFold :: tetra is false;
var thirdFold :: tetra is both;
var fourthFold :: tetra is neither;

firstFold?;
secondFold?;
thirdFold?;
fourthFold?;    

//both is both true and false, tests against bools and tetras and returns true
(thirdFold equals true and thirdFold equals false)?; 
(thirdFold equals firstFold and thirdFold equals secondFold)?; 
//neither is neither true or false, tests against bools and tetras and returns false
(fourthFold equals true or fourthFold equals false)?; 
(fourthFold equals firstFold or fourthFold equals secondFold)?;


// arrays
var arr :: int[] is [1, 2, 3, 4, 5];

arr?;
arr[3]?; // 4
arr[3] is 6;
arr[3]?; // 6
arr.push(42);
arr[5]?; // 42

// quantifiers
var ex is exists e in arr where e > 3;

ex?; // true

var uni is forall u in arr where u > 3;
uni?; // false

// conditionals
var condition is if true then "true" else "false";
condition?; // true

// default arguments
fn foo(a, b is 5) {return a+b;}

foo(1, 2)?; // 3
foo(1, ~)?; // 6

// tuple
var point is (10, 20, 30, 40, 50);
point[0]?; // 10
point[1]?; // 20

var point2 is ((10, 20), (30, 40));
point2[1][0]?; // 30

// map
var Map is {
    "a": 1,
    "b": 2,
    "c": 3,
};

Map["a"]?; // 1
Map["c"]?; // 3

// try catch
const con:: int is 1;
try {
    con is 2;
} catch {
    "can't do that"?;
}
con?; // 1

// formal logical notation
// first order logic, always returns a boolean value
(∃x ∈ arr : x > 3)?; // true
(∀x ∈ arr : x > 3)?; // false
(¬∀x ∈ arr : x > 3)?; // true
(false ↔ false)?; // true
(true ⊕ true)?; // false
(true ∧ false)?; // false
(true ∨ false)?; // true
(true ↑ false)?; // true
(true ↓ false)?; // false
// → implies

// trancendental logic notation
// always returns a tetra value, preserves contradiction in values
(
    
    true)?; // neither


// typeof
var _int is 5;
typeof(_int)?; // int

var _float is 5.5;
typeof(_float)?; // float

var _string is "hello";
typeof(_string)?; // string

var _boolean is true;
typeof(_boolean)?; // boolean

var _tetra is both;
typeof(_tetra)?; // tetra

typeof(arr)?; // array

typeof(Employee)?; // struct

typeof(mike)?; // Employee

typeof(Color)?; // enum
typeof(Color.Blue)?; // Color

typeof(point)?; // tuple

typeof(Map)?; // map
// Enums
enum Color {
    Red,
    Green,
    Blue,
}

const b: Color = .Blue;
const g: Color = .Green;

var result = match b {
    .Red => "It's red",
    .Blue => "It's blue",
    else => "It's something else",
};

result?; // It's blue

result = match g {
    .Red => "It's red",
    .Blue => "It's blue",
    else => "It's something else",
};

result?; // It's something else


// functions and loops / recursion
function fizzbuzz(x: int) {
    var current is x;
    while current <= 15 {
        if current % 15 equals 0 then "fizzbuzz"?;
        else if current % 3 equals 0 then "fizz"?;
        else if current % 5 equals 0 then "buzz"?;
        else current?;
        
        current += 1;
    }
}

fizzbuzz(1);


fn fber(x: int) {
    if x % 3 equals 0 and x % 5 equals 0 then "fizzbuzzer"?;
    else if x % 3 equals 0 then "fizzer"?;
    else if x % 5 equals 0 then "buzzer"?;
    else x?;

    if x < 15 then fber(x + 1);
}

fber(1);

// structs
struct Person {
    name: string,
    age: int,
}

struct Employee {
    person: Person,
    salary: int,
}

var mike = Employee {
    person = Person {
        name = "Mike",
        age = 25,
    },
    salary = 1000,
};

mike.person.age = 26;
mike.person.age?; // 26

mike.salary?; // 1000

// arrays
var array = [1, 2, 3, 4, 5];

array[3]?; // 4
array[3] = 6;
array[3]?; // 6

// conditionals
var condition is if true then "true" else "false";
condition?; // true

// default arguments
fn foo(a, b=5) {return a+b;}

foo(1, 2)?; // 3
foo(1, ~)?; // 6

// typeof
var _int = 5;
typeof(_int)?; // int

var _float = 5.5;
typeof(_float)?; // float

var _string = "hello";
typeof(_string)?; // string

var _boolean = true;
typeof(_boolean)?; // boolean

var _array = [1, 2, 3];
typeof(_array)?; // array

typeof(Employee)?; // struct

typeof(mike)?; // Employee

typeof(Color)?; // enum
typeof(Color.Blue)?; // Color

// tuple
var point = (10, 20, 30, 40, 50);
point[0]?; // 10
point[1]?; // 20

var point2 = ((10, 20), (30, 40));
point2[1][0]?; // 30

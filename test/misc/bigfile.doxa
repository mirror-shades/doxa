// Enums
enum Color {
    Red,
    Green,
    Blue,
}

const b:: Color = .Blue;
const g:: Color = .Green;

var result = match b {
    .Red => "It's red",
    .Blue => "It's blue",
    else => "It's something else",
};

result?; // It's blue

result = match g {
    .Red => "It's red",
    .Blue => "It's blue",
    else => "It's something else",
};

result?; // It's something else


// functions and loops / recursion
function fizzbuzz(x:: int) {
    var current is x;
    while current <= 15 {
        if current % 3 == 0 && current % 5 == 0 then "fizzbuzz"?;
        else if current % 3 == 0 then "fizz"?;
        else if current % 5 == 0 then "buzz"?;
        else current?;
        
        current += 1;
    }
}

fizzbuzz(1);


fn fber(x:: int) {
    if x % 3 equals 0 and x % 5 equals 0 then "fizzbuzzer"?;
    else if x % 3 equals 0 then "fizzer"?;
    else if x % 5 equals 0 then "buzzer"?;
    else x?;

    if x < 15 then fber(x + 1);
}

fber(1);

// structs
struct Person {
    name: string,
    age: int,
}

struct Employee {
    person: Person,
    salary: int,
}

var mike = Employee {
    person = Person {
        name = "Mike",
        age = 25,
    },
    salary = 1000,
};

mike.person.age = 26;
mike.person.age?; // 26

mike.salary?; // 1000

// Tetras
var firstFold :: tetra = true;
var secondFold :: tetra = false;
var thirdFold :: tetra = both;
var fourthFold :: tetra = neither;

firstFold?;
secondFold?;
thirdFold?;
fourthFold?;    

// arrays
var arr = [1, 2, 3, 4, 5];

arr[3]?; // 4
arr[3] = 6;
arr[3]?; // 6

// quantifiers
var ex = exists e in arr where e > 3;
ex?; // true

var uni = forall u in arr : u > 3;
uni?; // false

// conditionals
var condition is if true then "true" else "false";
condition?; // true

// default arguments
fn foo(a, b=5) {return a+b;}

foo(1, 2)?; // 3
foo(1, ~)?; // 6

// tuple
var point = (10, 20, 30, 40, 50);
point[0]?; // 10
point[1]?; // 20

var point2 = ((10, 20), (30, 40));
point2[1][0]?; // 30

// map
var Map = {
    "a": 1,
    "b": 2,
    "c": 3,
};

Map["a"]?; // 1
Map["c"]?; // 3

// try catch
const con:: int = 1;
try {
    con = 2;
} catch {
    "can't do that"?;
}
con?; // 1

// formal logical notation
(∃x ∈ arr : x > 3)?; // true
(∀x ∈ arr : x > 3)?; // false
(¬∀x ∈ arr : x > 3)?; // true
(false ↔ false)?; // true
(true ⊕ true)?; // false
(true ∧ false)?; // false
(true ∨ false)?; // true
(true ↑ false)?; // true
(true ↓ false)?; // false
// → implies


//trigger or warning conflict
var or1 is true or false;
var or2 is true || false;

// typeof
var _int = 5;
typeof(_int)?; // int

var _float = 5.5;
typeof(_float)?; // float

var _string = "hello";
typeof(_string)?; // string

var _boolean = true;
typeof(_boolean)?; // boolean

typeof(arr)?; // array

typeof(Employee)?; // struct

typeof(mike)?; // Employee

typeof(Color)?; // enum
typeof(Color.Blue)?; // Color

typeof(point)?; // tuple

typeof(Map)?; // map
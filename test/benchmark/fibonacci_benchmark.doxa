// Fibonacci Recursive Benchmark
// Tests function call overhead, recursion, and basic arithmetic

function fibonacci(n :: int) returns(int) {
    if n <= 1 then return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

function fibonacci_benchmark() {
    // Calculate fibonacci numbers up to 25
    // This creates significant recursive call overhead
    var i is 1;
    while i <= 24 {
        var result is fibonacci(i);
        // Uncomment the line below to see output (slows down benchmark)
        result?;
        i += 1;
    }
    "Fibonacci benchmark completed"?;
}

fibonacci_benchmark();
enum TokenType {
    NUMBER,
    OPERATOR,
    LPAREN,
    RPAREN,
}

struct Token {
    token_type :: TokenType,
    value :: string,
}

function precedence(op :: string) returns int {
    return match op {
        "(" then 0,
        ")" then 0,
        "+" then 1,
        "-" then 1,
        "*" then 2,
        "/" then 2,
        else -1,
    }
}

entry function main() {
    // all compiler level methods are distinguished by @
    const input is @input()
    const splitInput is split(input)
    @assert(verifyParens(splitInput), "parens don't match")
    const possibleTokens is tokenize(splitInput)

    possibleTokens as Token[] then {
        const rpn is shunt(possibleTokens) as Token[] then {
            execute(rpn)
        } else {
            "shunting failed"?
        }
    } else {
        "tokens failed to parse"?
    }

    return
}

function split(input :: string) returns string[] {
    var result :: string[]
    var current is ""

    const lin is @length(input)

    // `each` loops iterate through each element
    // they can work on strings as well as arrays
    // `at` is optional syntax for a loop index
    each c at i in input {
        // breaks number if operator is found
        if c == " " then {
            if current != "" then {
                @push(result, current)
                current is ""
            }
        }

        else if c == "+" or c == "*" or c == "/" or c == "(" or c == ")" then {
            if current != "" then {
                @push(result, current)
                current is ""
            }
            @push(result, c)
        }

        // make sure - isn't a negative sign
        else if c == "-" and input[i+1] == " " then {
            if current != "" then {
                @push(result, current)
                current is ""
            }
            @push(result, c)
        } 

        else if c != " " {
            current is current + c
        }

    }
    @push(result, current)
    return result
}

function verifyParens(input :: string[]) returns tetra {
    var depth is 0
    var passed :: tetra is true
    each s in input {
        if s == "(" then depth += 1
        if s == ")" then depth -= 1
        if depth < 0 then {
            passed is false
        }
    }
    if depth > 0 then {
        passed is false
    }
    return passed
}

function tokenize(input :: string[]) returns Token[] | nothing {
    var tokens :: Token[]

    each token in input {
        if token == "+" or token == "-" or token == "*" or token == "/" then {
            @push(tokens, Token {
                token_type is .OPERATOR,
                value is token,
            })
        } 
        else if token == "(" then {
            @push(tokens, Token {
                token_type is .LPAREN,
                value is token,
            })
        } 
        else if token == ")" then {
            @push(tokens, Token {
                token_type is .RPAREN,
                value is token,
            })
        } else {
            @push(tokens, Token { 
                token_type is .NUMBER,
                value is token,
            })
    }
    }
    return tokens
}

function shunt(tokens :: Token[]) returns Token[] | nothing {
    var output :: Token[]
    var operators :: Token[]

    each token in tokens {
        if token.token_type == TokenType.NUMBER then {
            @push(output, token)
        }

        else if token.token_type == TokenType.OPERATOR then {
            // pop higher or equal precedence ops onto output
            while @length(operators) > 0 {
                const top is operators[@length(operators) - 1]
                if top.token_type == TokenType.OPERATOR and precedence(top.value) >= precedence(token.value) then {
                    @push(output, top)
                    @pop(operators)
                } else {
                    break
                }
            }
            @push(operators, token)
        }

        else if token.token_type == TokenType.LPAREN then {
            @push(operators, token)
        }

        else if token.token_type == TokenType.RPAREN then {
            // pop until left paren found
            var matched is false
            while @length(operators) > 0 {
                const top is operators[@length(operators) - 1]
                if top.token_type == TokenType.LPAREN then {
                    @pop(operators)
                    matched is true
                    break
                } else {
                    @push(output, top)
                    @pop(operators)
                }
            }
            if !matched then {
                "mismatched parentheses"? 
                return nothing
            }
        }
    }

    // drain remaining operators
    while @length(operators) > 0 {
        const top is operators[@length(operators) - 1]
        if top.token_type == TokenType.LPAREN or top.token_type == TokenType.RPAREN then {
            "mismatched parentheses"? 
            return nothing
        }
        @push(output, top)
        @pop(operators)
    }

    return output
}

function execute(tokens :: Token[]) {
    var stack :: int[]

    each token in tokens {
        if token.token_type == TokenType.NUMBER then {
            const n is @int(token.value) as int else {
                token.value?
                "invalid number"?
                return
            }
            @push(stack, n)
        } 

        else if token.token_type == TokenType.OPERATOR then {
            // need two operands
            if @length(stack) < 2 then {
                "not enough operands"? 
                return
            }

            const right is @pop(stack)
            const left is @pop(stack)

            var result is 0

            if token.value == "+" then result is left + right
            else if token.value == "-" then result is left - right
            else if token.value == "*" then result is left * right
            else if token.value == "/" then result is left / right
            else {
                token.value?
                "invalid operator"?
                return
            }

            @push(stack, result)
        }
    }

    if @length(stack) != 1 then {
        "invalid expression"? 
        return
    }

    stack[0]?
    return
}
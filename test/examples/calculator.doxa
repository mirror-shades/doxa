enum TokenType {
    NUMBER,
    OPERATOR,
    LPAREN,
    RPAREN,
}

struct Token {
    token_type :: TokenType,
    value :: string,
}

function precedence(op :: string) returns int {
    return match op {
        "(" then 0,
        ")" then 0,
        "+" then 1,
        "-" then 1,
        "*" then 2,
        "/" then 2,
        else -1,
    }
}

entry function main() {
    const input is @input();
    const splitInput is split(input)
    @assert(verifyParens(splitInput), "parens don't match")
    const possibleTokens is tokenize(splitInput)

    possibleTokens as Token[] then {
        const rpn is shunt(possibleTokens)
        rpn??
    } else {
        "tokens failed to parse\n"?
    }
}

function evaluate() {

}

function split(input :: string) returns string[] {
    var result :: string[]
    var current is ""

    const lin is @length(input)

    // `each` loops iterate through each element
    // they can work on strings as well as arrays
    // `at` is optional syntax for a loop index
    each c at i in input {
        // breaks number if operator is found
        if c == " " then {
            if current != "" then {
                @push(result, current)
                current is ""
            }
        }

        else if c == "+" or c == "*" or c == "/" or c == "(" or c == ")" then {
            if current != "" then {
                @push(result, current)
                current is ""
            }
            @push(result, c)
        }

        // make sure - isn't a negative sign
        else if c == "-" and input[i+1] == " " then {
            if current != "" then {
                @push(result, current)
                current is ""
            }
            @push(result, c)
        } 

        else if c != " " {
            current is current + c
        }

    }
    @push(result, current)
    return result
}

function verifyParens(input :: string[]) returns tetra {
    var depth is 0
    var passed :: tetra is true
    each s in input {
        if s == "(" then depth += 1
        if s == ")" then depth -= 1
        if depth < 0 then {
            passed is false
        }
    }
    if depth > 0 then {
        passed is false
    }
    return passed
}

function tokenize(input :: string[]) returns Token[] | nothing {
    var tokens :: Token[]

    each token in input {
        if token == "+" or token == "-" or token == "*" or token == "/" then {
            @push(tokens, Token {
                token_type is .OPERATOR,
                value is token,
            })
        }
        else if token == "(" then {
            @push(tokens, Token {
                token_type is .LPAREN,
                value is token,
            })
        }
        else if token == ")" then {
            @push(tokens, Token {
                token_type is .RPAREN,
                value is token,
            })
        } else {
            if token != "" {
                @push(tokens, Token {
                    token_type is .NUMBER,
                    value is token,
                })
            }
        }
    }
    return tokens
}

function shunt(tokens :: Token[]) returns Token[] {
    var output :: Token[]
    var operators :: Token[]

    each t in tokens {
        if t.token_type == TokenType.NUMBER then {
            @push(output, t)
        }
        else if t.token_type == TokenType.OPERATOR then {

            while @length(operators) > 0 {
                const top_op is operators[@length(operators) - 1]
                if top_op.token_type != TokenType.OPERATOR then break

                const top_prec is precedence(top_op.value)
                const current_prec is precedence(t.value)

                if top_prec >= current_prec then {
                    const popped is @pop(operators)
                    @push(output, popped)
                } else {
                    break
                }
            }

            @push(operators, t)
        }
        else if t.token_type == TokenType.LPAREN then {
            @push(operators, t)
        }
        else if t.token_type == TokenType.RPAREN then {
            while @length(operators) > 0 and operators[@length(operators) - 1].token_type != TokenType.LPAREN {
                const popped is @pop(operators)
                @push(output, popped)
            }

            if @length(operators) > 0 and operators[@length(operators) - 1].token_type == TokenType.LPAREN then {
                @pop(operators)
            } else {
                ("Mismatched parentheses\n")?
            }
        }
    }

    while @length(operators) > 0 {
        const popped is @pop(operators)
        if popped.token_type == TokenType.LPAREN or popped.token_type == TokenType.RPAREN then ("Mismatched parentheses\n")?
        @push(output, popped)
    }

    return output
}

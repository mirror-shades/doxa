enum Error {
    INVALID_TOKEN,
}

enum TokenType {
    NUMBER,
    OPERATOR,
    PARENTHESIS,
}

struct Token {
    token_type :: TokenType,
    value :: string,
}

entry fn main() {
    const input is @input();
    input?;

    const splitInput is split(input);
    splitInput?;

    const tokens is tokenize(splitInput);
    tokens?;

    return;
}

fn split(input :: string) -> string[] {
    var result :: string[];
    var current is "";

    const lin is @length(input);
    lin?;

    each c at i in input {
        if @length(current) > 0 and (c equals " " or c equals "+" or c equals "-" or c equals "*" or c equals "/") then {
            @push(result, current);
            current is "";
        }

        if c equals " " then {
            // Skip spaces
        }
        else if c equals "+" or c equals "-" or c equals "*" or c equals "/" then {
            @push(result, c);
        } else {
            current is current + c;
        }

    }
    @push(result, current);
    return result;
}

fn tokenize(input :: string[]) -> Token[] | Error {
    var tokens :: Token[];

    each token at i in input {
        token?;
        if token equals "+" or token equals "-" or token equals "*" or token equals "/" then {
            @push(tokens, Token {
                token_type is .OPERATOR,
                value is token,
            });
        } 
        else if token equals "(" or token equals ")" then {
            @push(tokens, Token {
                token_type is .PARENTHESIS,
                value is token,
            });
        } else {
            var possibleNumber is @int(token);
            possibleNumber?;
            possibleNumber as int then {
                possibleNumber?;
                @push(tokens, Token {
                    token_type is .NUMBER,
                    value is possibleNumber,
                });
            } else {
                return Error.INVALID_TOKEN;
            }
        }
    }
    return tokens;
}

// a brainfuck interpreter implemented in doxa

const symbols is [ ">", "<", "+", "-", ".", ",", "[", "]" ];

// function getInput() returns(byte) {
//     var userInput :: string is input;
//     var newByte :: byte is @bytes(userInput)[0];
//     return newByte;
// }

// function startLoop() {
//     if @length(loopSpot) equals loops 
//     then {
//         loopSpot.push(ip);
//     } else {
//         loopSpot[loops] is ip;
//     }
//     loops += 1;
// }

// function endLoop() {
//     if loops >= 0 
//     then {
//         if tape[tp] equals 0 
//         then {
//             loops -= 1;
//         } else {
//             const loopPointer is loops - 1;
//             ip is loopSpot[loopPointer];
//             // cancels the ip += 1 from the main loop
//             ip -= 1;
//         }
//     }
// }

function checkClosingBracket(scan :: string) returns(tetra) {
    var pointer :: int is 0;
    var openBrackets :: int is 0;
    while(pointer < @length(scan)) {
        if(scan[pointer] equals "[") then openBrackets += 1;
        if(scan[pointer] equals "]") then openBrackets -= 1;
        pointer += 1;
    }
    return(openBrackets equals 0);
}


function interpret(scan :: string) {
    var tape :: byte[10];
    var tp :: int is 0;
    var ip :: int is 0;
    var loops :: int is 0;
    var loopSpot :: int[];
    const scanLength is @length(scan);

    var closedBrackets :: tetra is checkClosingBracket(scan);
    @assert(closedBrackets, "Unmatched brackets");

    // while(ip < scanLength) {
    //     var currentInstruction is scan[ip];
    //     if(currentInstruction equals ">") then tp += 1;
    //     if(currentInstruction equals "<") then tp -= 1;
    //     if(currentInstruction equals "+") then tape[tp] += 1;
    //     if(currentInstruction equals "-") then tape[tp] -= 1;
    //     if(currentInstruction equals ".") then tape[tp]?;
    //     if(currentInstruction equals ",") then tape[tp] is getInput();
    //     if(currentInstruction equals "[") then startLoop();
    //     if(currentInstruction equals "]") then endLoop();
    //     tape[tp]?;
    //     tape?;
    //     ip += 1;
    // }
}

-> function main() {
    interpret("[,+.");
}

// a brainfuck interpreter implemented in doxa

const symbols is [ ">", "<", "+", "-", ".", ",", "[", "]" ];

// input is read as a string and converted to an
// array of u8 using the bytes method.
function getInput() returns(u8) {
    var userInput :: string is input;
    var newByte :: u8 is userInput.bytes[0];
    return newByte;
}

function startLoop() {
    if loopSpot.length equals loops then {loopSpot.push(ip);}
    else {loopSpot[loops] is ip;};
    loops += 1;
}

function endLoop() {
    if loops equals 0 then {nothing;}
    else {
        if tape[tp] equals 0 then {
            loops -= 1;
        }
        else {
            const loopPointer is loops - 1;
            ip is loopSpot[loopPointer];
            // cancels the ip += 1 from the main loop
            ip -= 1;
        }
    }
}

function checkClosingBracket(scan :: string) returns(bool) {
    var pointer :: int is 0;
    var openBrackets :: int is 0;
    while(pointer < scan.length) {
        if(scan[pointer] equals "[") then {openBrackets += 1;}
        if(scan[pointer] equals "]") then {openBrackets -= 1;}
        pointer += 1;
    }
    return(openBrackets equals 0);
}


function interpret(scan :: string) {
    // tape is a list of u8 values to represent bytes on the tape
    // tape is initialized with 30000 cells
    // this can be increased to allow for more memory
    var tape :: u8[30000];
    var tp :: int is 0;
    var ip :: int is 0;
    var loops :: int is 0;
    var loopSpot :: int[] is [];
    const scanLength is scan.length;

    var closedBrackets :: bool is checkClosingBracket(scan);
    assert(closedBrackets, "Unmatched brackets");

    while(ip < scanLength) {
        var currentInstruction is scan[ip];
        if(currentInstruction equals ">") then {tp += 1;}
        if(currentInstruction equals "<") then {tp -= 1;}
        if(currentInstruction equals "+") then {tape[tp] += 1;}
        if(currentInstruction equals "-") then {tape[tp] -= 1;}
        if(currentInstruction equals ".") then {tape[tp]?;}
        if(currentInstruction equals ",") then {tape[tp] is getInput();}
        if(currentInstruction equals "[") then {startLoop();}
        if(currentInstruction equals "]") then {endLoop();}

        ip += 1;
    }
}

-> function main() {
    interpret(",+.");
}

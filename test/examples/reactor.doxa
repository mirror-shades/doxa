enum GameState {
    Start,
    Running,
    GameOver,
}

struct Reactor {
    rods :: int
    neutrons :: int
    power :: int
    maxPower :: int

    method addRod(this, x :: int) {
        var result is this.rods + x
        if result < 1 then {
            result is 1
        }
        this.rods is result
    }

    pub method getMaxPower(this) returns int {
        return this.maxPower
    }
}

function printMenu(state :: GameState, reactor :: Reactor) {
    match state {
        GameState.Start then {
            @print("1. Start Game\n")
        }
        GameState.Running then {
            @print("1. Retire\n")
        }
        GameState.GameOver then {
            @print("Max power: {reactor.getMaxPower()}\n")
            @print("1. Main Menu\n")
        }
    }
}

function handleInput(input :: string, ^state :: GameState, ^reactor :: Reactor) {
    match state {
        GameState.Start then {
            if input == "1" then state is GameState.Running
        }
        GameState.Running then {
            if input == "1" then state is GameState.GameOver
        }
        GameState.GameOver then {
            if input == "1" then state is GameState.Start
        }
    }
}

function printReactor(state :: GameState, reactor :: Reactor) {
    @print("Reactor is running\n")
}

function render(state :: GameState, reactor :: Reactor) {
    if state == GameState.Running then {
        printReactor(state, reactor)
    }
    printMenu(state, reactor)
}

entry function main() {
    var state is GameState.Start
    var reactor is Reactor {
        rods is 0,
        neutrons is 0,
        power is 0,
        maxPower is 0,
    }
    do {
        @print("Enter a command: \n")
        render(state, reactor)
        const input is @input()
        handleInput(input, ^state, ^reactor)
    }
}
// Tail Recursion Test
// This demonstrates tail call optimization by using deep recursion
// Without tail call optimization, this would cause stack overflow

// Tail-recursive countdown - perfect for tail call optimization
function countdown(n :: int) returns(int) {
    if n <= 0 then return 0;
    return countdown(n - 1);  // This IS tail recursive!
}

// Tail-recursive factorial with accumulator
function factorial_tail(n :: int, acc :: int) returns(int) {
    if n <= 1 then return acc;
    return factorial_tail(n - 1, n * acc);  // Tail recursive!
}

// Helper function for factorial (public interface)
function factorial(n :: int) returns(int) {
    return factorial_tail(n, 1);
}

// Tail-recursive sum with accumulator
function sum_tail(n :: int, acc :: int) returns(int) {
    if n <= 0 then return acc;
    return sum_tail(n - 1, acc + n);  // Tail recursive!
}

// Helper function for sum (public interface) 
function sum_range(n :: int) returns(int) {
    return sum_tail(n, 0);
}

// Test deep recursion that would normally stack overflow
function deep_recursion_test() {
    "Testing tail call optimization..."?;
    
    // Test 1: Deep countdown (10,000 calls)
    var result1 is countdown(10000);
    "Countdown(10000) result:"?;
    result1?;
    
    // Test 2: Factorial of 10
    var result2 is factorial(10);
    "Factorial(10) result:"?;
    result2?;  // Should be 3,628,800
    
    // Test 3: Sum 1+2+...+100
    var result3 is sum_range(100);
    "Sum(1..100) result:"?;
    result3?;  // Should be 5,050
    
    // Test 4: Very deep countdown (would definitely overflow without tail calls)
    var result4 is countdown(25000);
    "Very deep countdown(25000) result:"?;
    result4?;
    
    "Tail recursion test completed successfully!"?;
}

// Run the test
deep_recursion_test(); 
[CompileTime][Error][E2004] ./test_simple.doxa:3:16: equals sign '=' is not used for variable declarations, use 'is' instead
[CompileTime][Error][E1001] ./test_simple.doxa:4:30: Undefined variable
[CompileTime][Error][E6001] ./test_simple.doxa:4:30: Cannot call array method 'pop' on non-array type Nothing
[CompileTime][Error][E6001] ./test_simple.doxa:4:30: Cannot call array method 'pop' on non-array type Nothing
[CompileTime][Error][E6001] ./test_simple.doxa:4:30: Cannot call array method 'pop' on non-array type Nothing
[CompileTime][Error][E1001] ./test_simple.doxa:4:15: Undefined variable
[CompileTime][Error][E6001] ./test_simple.doxa:4:15: Cannot call length on non-array/string type Nothing
[CompileTime][Error][E1016] ./test_simple.doxa:4:26: Cannot compare Nothing with Int
[CompileTime][Error][E1017] ./test_simple.doxa:10:1: While condition must be tetra, got Nothing
[CompileTime][Error][E1001] ./test_simple.doxa:5:9: Undefined variable
[CompileTime][Error][E1001] ./test_simple.doxa:5:24: Undefined variable
[CompileTime][Error][E1001] ./test_simple.doxa:6:9: Undefined variable
[CompileTime][Error][E5002] ./test_simple.doxa:6:17: Cannot call non-function type Nothing
[CompileTime][Error][E1001] ./test_simple.doxa:6:9: Undefined variable
[CompileTime][Error][E5002] ./test_simple.doxa:6:17: Cannot call non-function type Nothing
[Debug][Hint] main.zig:409:0: Debug: Processing script: './test_simple.doxa'

[Debug][Hint] main.zig:429:0: Debug: Absolute path: '/home/user/dev/doxa/test_simple.doxa'

[Debug][Hint] main.zig:434:0: reporter debug method working

[Debug][Hint] main.zig:164:0: >> Constant folding applied: 0 optimizations

[Debug][Hint] codegen/hir/soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen/hir/soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen/hir/soxa_generator.zig:725:0: Variable arr has type base: Array
[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] main.zig:191:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:213:0: >> Compiled ./test_simple.doxa -> out/test_simple.soxa (32 HIR instructions)

[Debug][Hint] main.zig:507:0: >> Executing with HIR VM

[Debug][Hint] main.zig:224:0: >> Loaded SOXA: 32 instructions, 10 constants

[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StoreVar
[Debug][Hint] interpreter/vm.zig:994:0: DBG WRITE StoreVar (create) arr: storage_id=1, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_1
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 22 (label: while_body_1)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 5 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_2
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 29 (label: while_end_2)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: Halt
[Debug][Hint] main.zig:409:0: Debug: Processing script: './test_simple.doxa'

[Debug][Hint] main.zig:429:0: Debug: Absolute path: '/home/user/dev/doxa/test_simple.doxa'

[Debug][Hint] main.zig:434:0: reporter debug method working

[Debug][Hint] main.zig:164:0: >> Constant folding applied: 0 optimizations

[Debug][Hint] codegen/hir/soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen/hir/soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen/hir/soxa_generator.zig:725:0: Variable arr has type base: Array
[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] main.zig:191:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:213:0: >> Compiled ./test_simple.doxa -> out/test_simple.soxa (32 HIR instructions)

[Debug][Hint] main.zig:507:0: >> Executing with HIR VM

[Debug][Hint] main.zig:224:0: >> Loaded SOXA: 32 instructions, 10 constants

[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StoreVar
[Debug][Hint] interpreter/vm.zig:994:0: DBG WRITE StoreVar (create) arr: storage_id=1, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_1
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 22 (label: while_body_1)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 5 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_2
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 29 (label: while_end_2)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: Halt
[Debug][Hint] main.zig:409:0: Debug: Processing script: './test_simple.doxa'

[Debug][Hint] main.zig:429:0: Debug: Absolute path: '/home/user/dev/doxa/test_simple.doxa'

[Debug][Hint] main.zig:434:0: reporter debug method working

[Debug][Hint] main.zig:164:0: >> Constant folding applied: 0 optimizations

[Debug][Hint] codegen/hir/soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen/hir/soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen/hir/soxa_generator.zig:725:0: Variable arr has type base: Array
[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] main.zig:191:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:213:0: >> Compiled ./test_simple.doxa -> out/test_simple.soxa (32 HIR instructions)

[Debug][Hint] main.zig:507:0: >> Executing with HIR VM

[Debug][Hint] main.zig:224:0: >> Loaded SOXA: 32 instructions, 10 constants

[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StoreVar
[Debug][Hint] interpreter/vm.zig:994:0: DBG WRITE StoreVar (create) arr: storage_id=1, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_1
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 22 (label: while_body_1)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 5 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_2
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 29 (label: while_end_2)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: Halt
[Debug][Hint] main.zig:409:0: Debug: Processing script: './test_simple.doxa'

[Debug][Hint] main.zig:429:0: Debug: Absolute path: '/home/user/dev/doxa/test_simple.doxa'

[Debug][Hint] main.zig:434:0: reporter debug method working

[Debug][Hint] main.zig:164:0: >> Constant folding applied: 0 optimizations

[Debug][Hint] codegen/hir/soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen/hir/soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen/hir/soxa_generator.zig:725:0: Variable arr has type base: Array
[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] main.zig:191:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:213:0: >> Compiled ./test_simple.doxa -> out/test_simple.soxa (32 HIR instructions)

[Debug][Hint] main.zig:507:0: >> Executing with HIR VM

[Debug][Hint] main.zig:224:0: >> Loaded SOXA: 32 instructions, 10 constants

[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StoreVar
[Debug][Hint] interpreter/vm.zig:994:0: DBG WRITE StoreVar (create) arr: storage_id=1, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_1
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 22 (label: while_body_1)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 5 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_2
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 29 (label: while_end_2)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: Halt
[Debug][Hint] main.zig:409:0: Debug: Processing script: './test_debug.doxa'

[Debug][Hint] main.zig:429:0: Debug: Absolute path: '/home/user/dev/doxa/test_debug.doxa'

[Debug][Hint] main.zig:434:0: reporter debug method working

[Debug][Hint] main.zig:164:0: >> Constant folding applied: 0 optimizations

[Debug][Hint] codegen/hir/soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen/hir/soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen/hir/soxa_generator.zig:725:0: Variable x has type base: Int
[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] main.zig:191:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:213:0: >> Compiled ./test_debug.doxa -> out/test_debug.soxa (19 HIR instructions)

[Debug][Hint] main.zig:507:0: >> Executing with HIR VM

[Debug][Hint] main.zig:224:0: >> Loaded SOXA: 19 instructions, 4 constants

[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter/vm.zig:994:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 5 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_0
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 13 (label: else_0)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 120, 32, 105, 115, 32, 110, 111, 116, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 32, 53 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: Halt
[Debug][Hint] main.zig:409:0: Debug: Processing script: './test_detailed.doxa'

[Debug][Hint] main.zig:429:0: Debug: Absolute path: '/home/user/dev/doxa/test_detailed.doxa'

[Debug][Hint] main.zig:434:0: reporter debug method working

[Debug][Hint] main.zig:164:0: >> Constant folding applied: 0 optimizations

[Debug][Hint] codegen/hir/soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen/hir/soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen/hir/soxa_generator.zig:725:0: Variable arr has type base: Array
[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] codegen/hir/soxa_generator.zig:697:0: HIR: emitting break -> while_end_2
[Debug][Hint] main.zig:191:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:213:0: >> Compiled ./test_detailed.doxa -> out/test_detailed.soxa (45 HIR instructions)

[Debug][Hint] main.zig:507:0: >> Executing with HIR VM

[Debug][Hint] main.zig:224:0: >> Loaded SOXA: 45 instructions, 11 constants

[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StoreVar
[Debug][Hint] interpreter/vm.zig:994:0: DBG WRITE StoreVar (create) arr: storage_id=1, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_1
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 22 (label: while_body_1)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 5 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_3
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 35 (label: else_3)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 97, 98, 111, 117, 116, 32, 116, 111, 32, 98, 114, 101, 97, 107 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: Halt
[Debug][Hint] main.zig:409:0: Debug: Processing script: './test_no_parens.doxa'

[Debug][Hint] main.zig:429:0: Debug: Absolute path: '/home/user/dev/doxa/test_no_parens.doxa'

[Debug][Hint] main.zig:434:0: reporter debug method working

[Debug][Hint] main.zig:164:0: >> Constant folding applied: 0 optimizations

[Debug][Hint] codegen/hir/soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen/hir/soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen/hir/soxa_generator.zig:725:0: Variable arr has type base: Array
[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] codegen/hir/soxa_generator.zig:4042:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] main.zig:191:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:213:0: >> Compiled ./test_no_parens.doxa -> out/test_no_parens.soxa (32 HIR instructions)

[Debug][Hint] main.zig:507:0: >> Executing with HIR VM

[Debug][Hint] main.zig:224:0: >> Loaded SOXA: 32 instructions, 10 constants

[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StoreVar
[Debug][Hint] interpreter/vm.zig:994:0: DBG WRITE StoreVar (create) arr: storage_id=1, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_1
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 22 (label: while_body_1)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 5 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_2
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 29 (label: while_end_2)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: Halt
[Debug][Hint] main.zig:409:0: Debug: Processing script: './test_simple.doxa'

[Debug][Hint] main.zig:429:0: Debug: Absolute path: '/home/user/dev/doxa/test_simple.doxa'

[Debug][Hint] main.zig:434:0: reporter debug method working

[Debug][Hint] main.zig:164:0: >> Constant folding applied: 0 optimizations

[Debug][Hint] codegen/hir/soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen/hir/soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen/hir/soxa_generator.zig:725:0: Variable arr has type base: Array
[Debug][Hint] codegen/hir/soxa_generator.zig:4046:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] codegen/hir/soxa_generator.zig:4046:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] codegen/hir/soxa_generator.zig:697:0: HIR: emitting break -> while_end_2
[Debug][Hint] main.zig:191:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:213:0: >> Compiled ./test_simple.doxa -> out/test_simple.soxa (42 HIR instructions)

[Debug][Hint] main.zig:507:0: >> Executing with HIR VM

[Debug][Hint] main.zig:224:0: >> Loaded SOXA: 42 instructions, 10 constants

[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StoreVar
[Debug][Hint] interpreter/vm.zig:994:0: DBG WRITE StoreVar (create) arr: storage_id=1, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_1
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 22 (label: while_body_1)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 5 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_3
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 35 (label: else_3)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: Halt
[Debug][Hint] main.zig:409:0: Debug: Processing script: './test_simple.doxa'

[Debug][Hint] main.zig:429:0: Debug: Absolute path: '/home/user/dev/doxa/test_simple.doxa'

[Debug][Hint] main.zig:434:0: reporter debug method working

[Debug][Hint] main.zig:164:0: >> Constant folding applied: 0 optimizations

[Debug][Hint] codegen/hir/soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen/hir/soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen/hir/soxa_generator.zig:725:0: Variable arr has type base: Array
[Debug][Hint] codegen/hir/soxa_generator.zig:4046:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] codegen/hir/soxa_generator.zig:4046:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] codegen/hir/soxa_generator.zig:697:0: HIR: emitting break -> while_end_2
[Debug][Hint] main.zig:191:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:213:0: >> Compiled ./test_simple.doxa -> out/test_simple.soxa (45 HIR instructions)

[Debug][Hint] main.zig:507:0: >> Executing with HIR VM

[Debug][Hint] main.zig:224:0: >> Loaded SOXA: 45 instructions, 11 constants

[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StoreVar
[Debug][Hint] interpreter/vm.zig:994:0: DBG WRITE StoreVar (create) arr: storage_id=1, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_1
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 22 (label: while_body_1)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 5 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_3
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 35 (label: else_3)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 97, 98, 111, 117, 116, 32, 116, 111, 32, 98, 114, 101, 97, 107, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: Halt
[CompileTime][Error][E1003] ./test.doxa:53:54: Cannot use + operator between String and Custom. Both operands must be the same type.
[CompileTime][Error][E1003] ./test.doxa:53:69: Cannot use + operator between Nothing and String. Both operands must be the same type.
[CompileTime][Error][E1003] ./test.doxa:53:54: Cannot use + operator between Int and String
[CompileTime][Error][E1003] ./test.doxa:53:41: Cannot use + operator between String and Enum
[CompileTime][Error][E1003] ./test.doxa:53:41: Cannot use + operator between String and Enum
[CompileTime][Error][E1001] ./test.doxa:60:13: Undefined variable
[Runtime][Error][E1001] Undefined variable: prec
[Runtime][Error][E1001] Undefined variable: prec
[Runtime][Error][E1001] Undefined variable: prec
[CompileTime][Error][E1003] ./test_simple.doxa:4:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:5:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:6:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:7:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:8:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:9:23: Type mismatch: expected String, got Int
[CompileTime][Error][E1001] ./test_simple.doxa:11:12: Undefined variable
[CompileTime][Error][E1003] ./test_simple.doxa:12:1: Type mismatch: expected Int, got Nothing
[Runtime][Error][E1001] Undefined variable: re
[CompileTime][Error][E1003] ./test_simple.doxa:4:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:5:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:6:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:7:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:8:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:9:23: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:12:1: Type mismatch: expected Int, got String
[CompileTime][Error][E1003] ./test_simple.doxa:4:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:5:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:6:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:7:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:8:26: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:9:23: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test_simple.doxa:12:1: Type mismatch: expected Int, got String
[CompileTime][Error][E1016] ./test_simple.doxa:3:16: Cannot compare String with Int
[CompileTime][Error][E1017] ./test_simple.doxa:15:5: While condition must be tetra, got Nothing
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E1003] ./test_simple.doxa:13:34: Cannot use + operator between String and Nothing. Both operands must be the same type.
[CompileTime][Error][E1003] ./test_simple.doxa:13:38: Cannot use + operator between Nothing and String. Both operands must be the same type.
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[CompileTime][Error][E6001] ./test_simple.doxa:4:23: Cannot call array method 'pop' on non-array type String
[Debug][Hint] main.zig:409:0: Debug: Processing script: './test_simple.doxa'

[Debug][Hint] main.zig:429:0: Debug: Absolute path: '/home/user/dev/doxa/test_simple.doxa'

[Debug][Hint] main.zig:434:0: reporter debug method working

[Debug][Hint] main.zig:164:0: >> Constant folding applied: 0 optimizations

[Debug][Hint] codegen/hir/soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen/hir/soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen/hir/soxa_generator.zig:4046:0: inferBinaryOpResultType: Int GREATER Int
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op GREATER: left_type=Int, right_type=Int, result_type=Tetra

[Debug][Hint] codegen/hir/soxa_generator.zig:4046:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen/hir/soxa_generator.zig:4046:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen/hir/soxa_generator.zig:4046:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen/hir/soxa_generator.zig:4046:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen/hir/soxa_generator.zig:1835:0: Checking union members for variable x
[Debug][Hint] codegen/hir/soxa_generator.zig:1851:0: No union members found for x
[Debug][Hint] codegen/hir/soxa_generator.zig:4046:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen/hir/soxa_generator.zig:4046:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen/hir/soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:191:0: >> Peephole optimizations applied: 2 HIR instruction optimizations

[Debug][Hint] main.zig:213:0: >> Compiled ./test_simple.doxa -> out/test_simple.soxa (124 HIR instructions)

[Debug][Hint] main.zig:507:0: >> Executing with HIR VM

[Debug][Hint] main.zig:224:0: >> Loaded SOXA: 124 instructions, 27 constants

[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: ArraySet
[Debug][Hint] interpreter/vm.zig:2045:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter/vm.zig:2075:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: Call
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: EnterScope
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: StoreVar
[Debug][Hint] interpreter/vm.zig:994:0: DBG WRITE StoreVar (create) op: storage_id=5, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: StoreVar
[Debug][Hint] interpreter/vm.zig:994:0: DBG WRITE StoreVar (create) list: storage_id=6, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 5 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_3
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 35 (label: while_body_3)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: ArrayPop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: StoreVar
[Debug][Hint] interpreter/vm.zig:981:0: DBG WRITE StoreVar list: storage_id=6, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: StoreVar
[Debug][Hint] interpreter/vm.zig:994:0: DBG WRITE StoreVar (create) x: storage_id=7, value=types.types.TokenLiteral{ .string = { 47 } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 47 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '/' and '+', lengths: 1 and 1, result: false
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=match_check_8
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 47 (label: match_check_8)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 47 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '/' and '-', lengths: 1 and 1, result: false
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=match_check_10
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 52 (label: match_check_10)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 47 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 42 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '/' and '*', lengths: 1 and 1, result: false
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=match_check_12
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 57 (label: match_check_12)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 47 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 47 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '/' and '/', lengths: 1 and 1, result: true
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=match_case_11
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 76 (label: match_case_11)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 76 at IP 76: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 77 at IP 77: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 78 at IP 78: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 79 at IP 79: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 84 at IP 84: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 85 at IP 85: StoreConst
[Debug][Hint] interpreter/vm.zig:1061:0: DBG WRITE StoreConst (create) res: storage_id=8, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 86 at IP 86: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 87 at IP 87: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 88 at IP 88: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 89 at IP 89: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 90 at IP 90: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 91 at IP 91: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 92 at IP 92: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 93 at IP 93: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 94 at IP 94: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 10, 116, 104, 101, 32, 108, 105, 115, 116, 32, 105, 115, 58, 32, 91, 42, 44, 32, 43, 44, 32, 45, 44, 32, 61, 93, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 95 at IP 95: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 96 at IP 96: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 97 at IP 97: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 98 at IP 98: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 99 at IP 99: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 100 at IP 100: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 101 at IP 101: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 102 at IP 102: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 103 at IP 103: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 104 at IP 104: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 104, 101, 32, 112, 111, 112, 112, 101, 100, 32, 118, 97, 108, 117, 101, 32, 105, 115, 32, 47, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 105 at IP 105: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 106 at IP 106: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 107 at IP 107: Peek
[Debug][Hint] interpreter/vm.zig:1356:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 47 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:1367:0: Peek instruction for variable x
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 108 at IP 108: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 109 at IP 109: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 110 at IP 110: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 111 at IP 111: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 112 at IP 112: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 113 at IP 113: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 114 at IP 114: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 115 at IP 115: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 116 at IP 116: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 117 at IP 117: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 104, 101, 32, 112, 114, 101, 99, 101, 100, 101, 110, 99, 101, 32, 111, 102, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 32, 105, 115, 32, 50, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 118 at IP 118: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 119 at IP 119: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 4 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_3
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 35 (label: while_body_3)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: ArrayPop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: StoreVar
[Debug][Hint] interpreter/vm.zig:981:0: DBG WRITE StoreVar list: storage_id=6, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: StoreVar
[Debug][Hint] interpreter/vm.zig:981:0: DBG WRITE StoreVar x: storage_id=7, value=types.types.TokenLiteral{ .string = { 61 } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 61 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '=' and '+', lengths: 1 and 1, result: false
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=match_check_8
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 47 (label: match_check_8)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 61 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '=' and '-', lengths: 1 and 1, result: false
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=match_check_10
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 52 (label: match_check_10)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 61 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 42 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '=' and '*', lengths: 1 and 1, result: false
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=match_check_12
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 57 (label: match_check_12)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 61 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 47 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '=' and '/', lengths: 1 and 1, result: false
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=match_check_14
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 62 (label: match_check_14)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 62 at IP 62: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 63 at IP 63: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 80 at IP 80: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 81 at IP 81: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 82 at IP 82: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 83 at IP 83: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 84 at IP 84: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 85 at IP 85: StoreConst
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 86 at IP 86: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 87 at IP 87: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 88 at IP 88: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 89 at IP 89: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 90 at IP 90: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 91 at IP 91: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 92 at IP 92: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 93 at IP 93: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 94 at IP 94: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 10, 116, 104, 101, 32, 108, 105, 115, 116, 32, 105, 115, 58, 32, 91, 42, 44, 32, 43, 44, 32, 45, 93, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 95 at IP 95: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 96 at IP 96: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 97 at IP 97: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 98 at IP 98: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 99 at IP 99: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 100 at IP 100: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 101 at IP 101: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 102 at IP 102: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 103 at IP 103: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 104 at IP 104: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 104, 101, 32, 112, 111, 112, 112, 101, 100, 32, 118, 97, 108, 117, 101, 32, 105, 115, 32, 61, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 105 at IP 105: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 106 at IP 106: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 107 at IP 107: Peek
[Debug][Hint] interpreter/vm.zig:1356:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 61 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:1367:0: Peek instruction for variable x
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 108 at IP 108: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 109 at IP 109: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 110 at IP 110: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 111 at IP 111: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 112 at IP 112: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 113 at IP 113: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 114 at IP 114: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 115 at IP 115: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 116 at IP 116: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 117 at IP 117: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 104, 101, 32, 112, 114, 101, 99, 101, 100, 101, 110, 99, 101, 32, 111, 102, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 32, 105, 115, 32, 50, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 118 at IP 118: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 119 at IP 119: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_3
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 35 (label: while_body_3)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: ArrayPop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: StoreVar
[Debug][Hint] interpreter/vm.zig:981:0: DBG WRITE StoreVar list: storage_id=6, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: StoreVar
[Debug][Hint] interpreter/vm.zig:981:0: DBG WRITE StoreVar x: storage_id=7, value=types.types.TokenLiteral{ .string = { 45 } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '-' and '+', lengths: 1 and 1, result: false
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=match_check_8
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 47 (label: match_check_8)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '-' and '-', lengths: 1 and 1, result: true
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=match_case_7
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 68 (label: match_case_7)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 68 at IP 68: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 69 at IP 69: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 70 at IP 70: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 71 at IP 71: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 84 at IP 84: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 85 at IP 85: StoreConst
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 86 at IP 86: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 87 at IP 87: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 88 at IP 88: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 89 at IP 89: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 90 at IP 90: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 91 at IP 91: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 92 at IP 92: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 93 at IP 93: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 94 at IP 94: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 10, 116, 104, 101, 32, 108, 105, 115, 116, 32, 105, 115, 58, 32, 91, 42, 44, 32, 43, 93, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 95 at IP 95: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 96 at IP 96: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 97 at IP 97: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 98 at IP 98: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 99 at IP 99: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 100 at IP 100: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 101 at IP 101: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 102 at IP 102: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 103 at IP 103: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 104 at IP 104: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 104, 101, 32, 112, 111, 112, 112, 101, 100, 32, 118, 97, 108, 117, 101, 32, 105, 115, 32, 45, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 105 at IP 105: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 106 at IP 106: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 107 at IP 107: Peek
[Debug][Hint] interpreter/vm.zig:1356:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 45 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:1367:0: Peek instruction for variable x
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 108 at IP 108: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 109 at IP 109: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 110 at IP 110: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 111 at IP 111: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 112 at IP 112: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 113 at IP 113: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 114 at IP 114: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 115 at IP 115: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 116 at IP 116: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 117 at IP 117: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 104, 101, 32, 112, 114, 101, 99, 101, 100, 101, 110, 99, 101, 32, 111, 102, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 32, 105, 115, 32, 50, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 118 at IP 118: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 119 at IP 119: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 2 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_3
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 35 (label: while_body_3)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: ArrayPop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: StoreVar
[Debug][Hint] interpreter/vm.zig:981:0: DBG WRITE StoreVar list: storage_id=6, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: StoreVar
[Debug][Hint] interpreter/vm.zig:981:0: DBG WRITE StoreVar x: storage_id=7, value=types.types.TokenLiteral{ .string = { 43 } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '+' and '+', lengths: 1 and 1, result: true
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=match_case_6
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 64 (label: match_case_6)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 64 at IP 64: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 65 at IP 65: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 66 at IP 66: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 67 at IP 67: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 84 at IP 84: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 85 at IP 85: StoreConst
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 86 at IP 86: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 87 at IP 87: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 88 at IP 88: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 89 at IP 89: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 90 at IP 90: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 91 at IP 91: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 92 at IP 92: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 93 at IP 93: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 94 at IP 94: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 10, 116, 104, 101, 32, 108, 105, 115, 116, 32, 105, 115, 58, 32, 91, 42, 93, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 95 at IP 95: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 96 at IP 96: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 97 at IP 97: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 98 at IP 98: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 99 at IP 99: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 100 at IP 100: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 101 at IP 101: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 102 at IP 102: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 103 at IP 103: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 104 at IP 104: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 104, 101, 32, 112, 111, 112, 112, 101, 100, 32, 118, 97, 108, 117, 101, 32, 105, 115, 32, 43, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 105 at IP 105: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 106 at IP 106: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 107 at IP 107: Peek
[Debug][Hint] interpreter/vm.zig:1356:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 43 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:1367:0: Peek instruction for variable x
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 108 at IP 108: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 109 at IP 109: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 110 at IP 110: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 111 at IP 111: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 112 at IP 112: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 113 at IP 113: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 114 at IP 114: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 115 at IP 115: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 116 at IP 116: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 117 at IP 117: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 104, 101, 32, 112, 114, 101, 99, 101, 100, 101, 110, 99, 101, 32, 111, 102, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 32, 105, 115, 32, 50, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 118 at IP 118: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 119 at IP 119: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 1 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_3
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 35 (label: while_body_3)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: ArrayPop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: StoreVar
[Debug][Hint] interpreter/vm.zig:981:0: DBG WRITE StoreVar list: storage_id=6, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: StoreVar
[Debug][Hint] interpreter/vm.zig:981:0: DBG WRITE StoreVar x: storage_id=7, value=types.types.TokenLiteral{ .string = { 42 } }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 42 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '*' and '+', lengths: 1 and 1, result: false
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=match_check_8
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 47 (label: match_check_8)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 42 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '*' and '-', lengths: 1 and 1, result: false
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=match_check_10
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 52 (label: match_check_10)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: Dup
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 42 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 42 } }), operand_type=String
[Debug][Hint] interpreter/vm.zig:3405:0: DBG compareEqual: comparing strings '*' and '*', lengths: 1 and 1, result: true
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=match_case_9
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 72 (label: match_case_9)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 72 at IP 72: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 73 at IP 73: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 74 at IP 74: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 75 at IP 75: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 84 at IP 84: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 85 at IP 85: StoreConst
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 86 at IP 86: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 87 at IP 87: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 88 at IP 88: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 89 at IP 89: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 90 at IP 90: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 91 at IP 91: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 92 at IP 92: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 93 at IP 93: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 94 at IP 94: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 10, 116, 104, 101, 32, 108, 105, 115, 116, 32, 105, 115, 58, 32, 91, 93, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 95 at IP 95: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 96 at IP 96: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 97 at IP 97: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 98 at IP 98: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 99 at IP 99: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 100 at IP 100: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 101 at IP 101: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 102 at IP 102: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 103 at IP 103: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 104 at IP 104: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 104, 101, 32, 112, 111, 112, 112, 101, 100, 32, 118, 97, 108, 117, 101, 32, 105, 115, 32, 42, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 105 at IP 105: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 106 at IP 106: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 107 at IP 107: Peek
[Debug][Hint] interpreter/vm.zig:1356:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 42 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:1367:0: Peek instruction for variable x
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 108 at IP 108: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 109 at IP 109: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 110 at IP 110: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 111 at IP 111: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 112 at IP 112: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 113 at IP 113: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 114 at IP 114: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 115 at IP 115: Swap
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 116 at IP 116: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 117 at IP 117: Print
[Debug][Hint] interpreter/vm.zig:1504:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter/vm.zig:1506:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 104, 101, 32, 112, 114, 101, 99, 101, 100, 101, 110, 99, 101, 32, 111, 102, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 32, 105, 115, 32, 50, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 118 at IP 118: Pop
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 119 at IP 119: Jump
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Compare
[Debug][Hint] interpreter/vm.zig:1258:0: DBG Compare Gt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter/vm.zig:1270:0: DBG Compare result: Gt = false
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: JumpCond
[Debug][Hint] interpreter/vm.zig:1321:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_4
[Debug][Hint] interpreter/vm.zig:1326:0: DBG JumpCond: jumping to IP 120 (label: while_end_4)
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 120 at IP 120: Label
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 121 at IP 121: Const
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 122 at IP 122: ExitScope
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 123 at IP 123: Return
[Debug][Hint] interpreter/vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Halt
[CompileTime][Error][E1014] ./test/examples/calculator.doxa:39:9: Type casting 'as' can only be used with union types, got Array
[Runtime][Error][E1001] Cannot modify constant variable: input
[Runtime][Error][E1001] Cannot modify constant variable: input
[Runtime][Error][E1001] Cannot modify constant variable: input
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:374:1: Type mismatch: expected Int, got Union
[Runtime][Error][E1001] Cannot modify constant variable: limit
[Runtime][Error][E1001] Cannot modify constant variable: x
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:374:1: Type mismatch: expected Int, got Union
[Runtime][Error][E1001] Cannot modify constant variable: limit
[Runtime][Error][E1001] Cannot modify constant variable: x
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:375:1: Type mismatch: expected Int, got Union
[Runtime][Error][E1001] Cannot modify constant variable: limit
[Runtime][Error][E1001] Cannot modify constant variable: x
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:375:1: Type mismatch: expected Int, got Union
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:375:1: Type mismatch: expected Int, got Union
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:375:1: Type mismatch: expected Int, got Union
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:375:1: Type mismatch: expected Int, got Union
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:375:1: Type mismatch: expected Int, got Union
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:375:1: Type mismatch: expected Int, got Union
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:374:1: Type mismatch: expected Int, got Union
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:394:1: Type mismatch: expected Int, got Union
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:394:1: Type mismatch: expected Int, got Union
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:392:1: Type mismatch: expected Int, got Union
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:392:1: Type mismatch: expected Int, got Union
[CompileTime][Error][E1014] ./test/examples/calculator.doxa:39:9: Type casting 'as' can only be used with union types, got Array
[CompileTime][Error][E2017] ./test/examples/calculator.doxa:157:79: Unsupported unary operator: types.token.TokenType.BANG
[CompileTime][Error][E1003] ./test/examples/calculator.doxa:151:48: Cannot use + operator between Int and String
[CompileTime][Error][E1003] ./test/examples/calculator.doxa:151:41: Cannot use + operator between String and Unknown
[CompileTime][Error][E1003] ./test/examples/calculator.doxa:151:41: Cannot use + operator between String and Unknown
[CompileTime][Error][E1003] ./test/examples/calculator.doxa:151:49: Cannot use + operator between Int and String
[CompileTime][Error][E1003] ./test/examples/calculator.doxa:151:42: Cannot use + operator between String and Unknown
[CompileTime][Error][E1003] ./test/examples/calculator.doxa:151:42: Cannot use + operator between String and Unknown
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:392:1: Type mismatch: expected Int, got Union
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:392:1: Type mismatch: expected Int, got Union

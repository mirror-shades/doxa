[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[CompileTime][Error][E1001] ./test.doxa:1:11: Undefined variable
[CompileTime][Error][E1007] ./test.doxa:1:13: Arithmetic requires numeric operands
[CompileTime][Error][E1007] ./test.doxa:1:18: Arithmetic requires numeric operands
[CompileTime][Error][E1020] ./test.doxa:1:11: Undefined variable: 'x'
[CompileTime][Error][E1009] ./test.doxa:1:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test.doxa:2:1: Undefined variable
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[CompileTime][Error][E1001] ./test.doxa:1:10: Undefined variable
[CompileTime][Error][E1007] ./test.doxa:1:12: Arithmetic requires numeric operands
[CompileTime][Error][E1020] ./test.doxa:1:10: Undefined variable: 'x'
[CompileTime][Error][E1009] ./test.doxa:1:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test.doxa:2:1: Undefined variable
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (10 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 10 instructions, 2 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (12 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 12 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=1, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test/misc/bigfile.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\misc\bigfile.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 3
[Debug][Hint] codegen\hir\soxa_generator.zig:548:0: HIR: module 'safeMath' globals count: 2
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable limit has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:548:0: HIR: module 'math' globals count: 1
[Debug][Hint] codegen\hir\soxa_generator.zig:548:0: HIR: module 'import' globals count: 3
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable import1
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for import1
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable import2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for import2
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Custom
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable g has type base: Custom
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable matchResult
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for matchResult
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable matchResult
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for matchResult
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable mixedBranch1
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for mixedBranch1
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable mixedBranch2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for mixedBranch2
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable stringArr has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable index
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for index
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable word
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for word
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable asThenUnion has type base: Union
[Debug][Hint] codegen\hir\soxa_generator.zig:737:0: Found union type with 2 members
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 0: int
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 1: float
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 2: byte
[Debug][Hint] codegen\hir\soxa_generator.zig:756:0: Recorded union members for variable asThenUnion
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable asThen
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for asThen
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable asThen2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for asThen2
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable asThen3
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for asThen3
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable asThen4
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for asThen4
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable result
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for result
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable result
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for result
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable asThenUnion
[Debug][Hint] codegen\hir\soxa_generator.zig:1767:0: Found union members for asThenUnion by index: { { 105, 110, 116 }, { 102, 108, 111, 97, 116 }, { 98, 121, 116, 101 } }
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable asThenUnion
[Debug][Hint] codegen\hir\soxa_generator.zig:1767:0: Found union members for asThenUnion by index: { { 105, 110, 116 }, { 102, 108, 111, 97, 116 }, { 98, 121, 116, 101 } }
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable asThenUnion
[Debug][Hint] codegen\hir\soxa_generator.zig:1767:0: Found union members for asThenUnion by index: { { 105, 110, 116 }, { 102, 108, 111, 97, 116 }, { 98, 121, 116, 101 } }
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable x has type base: Union
[Debug][Hint] codegen\hir\soxa_generator.zig:737:0: Found union type with 2 members
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 0: int
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 1: float
[Debug][Hint] codegen\hir\soxa_generator.zig:756:0: Recorded union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable mike has type base: Custom
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable firstFold has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable secondFold has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable thirdFold has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable fourthFold has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable firstFold
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for firstFold
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable secondFold
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for secondFold
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable thirdFold
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for thirdFold
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable fourthFold
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for fourthFold
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable Bob has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable Shakespere has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable zombie has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable angel has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable arr has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable arr
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for arr
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable checkAgainst has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable initArr has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable floatArr has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable byteArr has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tetraArr has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable strArr has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable ex
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for ex
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable uni
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for uni
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable condition
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for condition
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable un1 has type base: Union
[Debug][Hint] codegen\hir\soxa_generator.zig:737:0: Found union type with 2 members
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 0: int
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 1: float
[Debug][Hint] codegen\hir\soxa_generator.zig:756:0: Recorded union members for variable un1
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable un2 has type base: Union
[Debug][Hint] codegen\hir\soxa_generator.zig:737:0: Found union type with 2 members
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 0: int
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 1: float
[Debug][Hint] codegen\hir\soxa_generator.zig:756:0: Recorded union members for variable un2
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable newun has type base: Union
[Debug][Hint] codegen\hir\soxa_generator.zig:737:0: Found union type with 2 members
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 0: int
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 1: float
[Debug][Hint] codegen\hir\soxa_generator.zig:756:0: Recorded union members for variable newun
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable resint
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for resint
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable resfloat
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for resfloat
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable Map has type base: Map
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable brokenLine
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for brokenLine
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable s has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable _int has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable _int
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for _int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable _float has type base: Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable _float
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for _float
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable _byte has type base: Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable _byte
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for _byte
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable _tetra has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable _tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for _tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable _string has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable _string
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for _string
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable current
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for current
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] codegen\hir\soxa_generator.zig:1756:0: Checking union members for variable x
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: No union members found for x
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 8 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test/misc/bigfile.doxa -> out/bigfile.soxa (1338 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 1338 instructions, 246 constants

[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) limit: storage_id=115, value=types.types.TokenLiteral{ .int = 255 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) import1: storage_id=116, value=types.types.TokenLiteral{ .int = 81 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 81 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable import1
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) import2: storage_id=117, value=types.types.TokenLiteral{ .int = -1 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable import2
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 105, 109, 112, 111, 114, 116, 101, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=118, value=types.types.TokenLiteral{ .int = 60 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 60 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 100 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) Color: storage_id=119, value=types.types.TokenLiteral{ .string = { 67, 111, 108, 111, 114 } }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) b: storage_id=120, value=types.types.TokenLiteral{ .enum_variant = { 66, 108, 117, 101 } }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) g: storage_id=121, value=types.types.TokenLiteral{ .enum_variant = { 71, 114, 101, 101, 110 } }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=enum_variant, b=enum_variant, operand_type=Enum
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=enum_variant, b=enum_variant, operand_type=Enum
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) matchResult: storage_id=122, value=types.types.TokenLiteral{ .string = { 73, 116, 39, 115, 32, 98, 108, 117, 101 } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 73, 116, 39, 115, 32, 98, 108, 117, 101 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable matchResult
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=enum_variant, b=enum_variant, operand_type=Enum
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=enum_variant, b=enum_variant, operand_type=Enum
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar matchResult: storage_id=122, value=types.types.TokenLiteral{ .string = { 73, 116, 39, 115, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 101, 108, 115, 101 } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 73, 116, 39, 115, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 101, 108, 115, 101 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable matchResult
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=123, value=types.types.TokenLiteral{ .int = 115 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=124, value=types.types.TokenLiteral{ .int = 100 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) current: storage_id=125, value=types.types.TokenLiteral{ .int = 100 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 98, 117, 122, 122 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 101 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 101 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable current
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 102 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 105, 122, 122 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 103 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 103 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable current
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 104 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 104 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable current
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 105 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 105, 122, 122, 98, 117, 122, 122 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 106 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 106 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable current
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 107 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 107 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable current
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 108 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 105, 122, 122 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 109 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 109 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable current
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 110 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 98, 117, 122, 122 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 111 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 105, 122, 122 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 112 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 112 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable current
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 113 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 113 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable current
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 114 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 105, 122, 122 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 115 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 98, 117, 122, 122 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar current: storage_id=125, value=types.types.TokenLiteral{ .int = 116 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Le: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=126, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=127, value=types.types.TokenLiteral{ .int = 1000 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 98, 117, 122, 122, 101, 114 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=128, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=129, value=types.types.TokenLiteral{ .int = 1001 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1001 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=130, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=131, value=types.types.TokenLiteral{ .int = 1002 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 105, 122, 122, 101, 114 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=132, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=133, value=types.types.TokenLiteral{ .int = 1003 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1003 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=134, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=135, value=types.types.TokenLiteral{ .int = 1004 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1004 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=136, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=137, value=types.types.TokenLiteral{ .int = 1005 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 105, 122, 122, 98, 117, 122, 122, 101, 114 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=138, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=139, value=types.types.TokenLiteral{ .int = 1006 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1006 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=140, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=141, value=types.types.TokenLiteral{ .int = 1007 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1007 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=142, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=143, value=types.types.TokenLiteral{ .int = 1008 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 105, 122, 122, 101, 114 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=144, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=145, value=types.types.TokenLiteral{ .int = 1009 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1009 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=146, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=147, value=types.types.TokenLiteral{ .int = 1010 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 98, 117, 122, 122, 101, 114 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=148, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=149, value=types.types.TokenLiteral{ .int = 1011 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 105, 122, 122, 101, 114 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=150, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=151, value=types.types.TokenLiteral{ .int = 1012 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1012 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=152, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=153, value=types.types.TokenLiteral{ .int = 1013 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1013 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=154, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=155, value=types.types.TokenLiteral{ .int = 1014 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 105, 122, 122, 101, 114 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) limit: storage_id=156, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=157, value=types.types.TokenLiteral{ .int = 1015 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 98, 117, 122, 122, 101, 114 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=158, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) i: storage_id=159, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 660 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar i: storage_id=159, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 726 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar i: storage_id=159, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 792 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar i: storage_id=159, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 858 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar i: storage_id=159, value=types.types.TokenLiteral{ .int = 4 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 924 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar i: storage_id=159, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) notUsed: storage_id=160, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) mixedBranch1: storage_id=161, value=types.types.TokenLiteral{ .string = { 116, 114, 117, 101 } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 114, 117, 101 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable mixedBranch1
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) mixedBranch2: storage_id=162, value=types.types.TokenLiteral{ .string = { 102, 97, 108, 115, 101 } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 97, 108, 115, 101 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable mixedBranch2
[Debug][Hint] interpreter\vm.zig:1737:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1767:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:1737:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1767:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:1737:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1767:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:1737:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1767:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) stringArr: storage_id=163, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) __fe_arr_foreach_start_38: storage_id=164, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) __fe_len_foreach_start_38: storage_id=165, value=types.types.TokenLiteral{ .int = 4 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) index: storage_id=166, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=String, retrieved element type=string
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) word: storage_id=167, value=types.types.TokenLiteral{ .string = { 104, 101, 108, 108, 111 } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable index
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 104, 101, 108, 108, 111 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable word
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar index: storage_id=166, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=String, retrieved element type=string
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar word: storage_id=167, value=types.types.TokenLiteral{ .string = { 119, 111, 114, 108, 100 } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable index
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 119, 111, 114, 108, 100 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable word
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar index: storage_id=166, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=String, retrieved element type=string
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar word: storage_id=167, value=types.types.TokenLiteral{ .string = { 102, 111, 111 } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 2 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable index
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 111, 111 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable word
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar index: storage_id=166, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=String, retrieved element type=string
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar word: storage_id=167, value=types.types.TokenLiteral{ .string = { 98, 97, 114 } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 3 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable index
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 98, 97, 114 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable word
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar index: storage_id=166, value=types.types.TokenLiteral{ .int = 4 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) asThenUnion: storage_id=168, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) asThen: storage_id=169, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable asThen
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) asThen2: storage_id=170, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable asThen2
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) asThen3: storage_id=171, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable asThen3
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) asThen4: storage_id=172, value=types.types.TokenLiteral{ .float = 0e0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 0e0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable asThen4
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) result: storage_id=173, value=types.types.TokenLiteral{ .int = 50 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 50 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable result
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable asThenUnion
[Debug][Hint] interpreter\vm.zig:1230:0: Found union members: { { 105, 110, 116 }, { 102, 108, 111, 97, 116 }, { 98, 121, 116, 101 } }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar asThenUnion: storage_id=168, value=types.types.TokenLiteral{ .float = 1.2345e1 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.2345e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable asThenUnion
[Debug][Hint] interpreter\vm.zig:1230:0: Found union members: { { 105, 110, 116 }, { 102, 108, 111, 97, 116 }, { 98, 121, 116, 101 } }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar asThenUnion: storage_id=168, value=types.types.TokenLiteral{ .byte = 10 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .byte = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable asThenUnion
[Debug][Hint] interpreter\vm.zig:1230:0: Found union members: { { 105, 110, 116 }, { 102, 108, 111, 97, 116 }, { 98, 121, 116, 101 } }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) x: storage_id=174, value=types.types.TokenLiteral{ .int = 17 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) x: storage_id=175, value=types.types.TokenLiteral{ .int = 17 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 17 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable x
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 114, 101, 116, 117, 114, 110 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 105, 109, 112, 108, 105, 99, 105, 116 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) mike: storage_id=176, value=types.types.TokenLiteral{ .struct_value = types.types.TokenLiteral__struct_26686{ .type_name = { 69, 109, 112, 108, 111, 121, 101, 101 }, .fields = { types.types.StructField{ ... }, types.types.StructField{ ... } }, .path = null } }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar mike: storage_id=176, value=types.types.TokenLiteral{ .struct_value = types.types.TokenLiteral__struct_26686{ .type_name = { 69, 109, 112, 108, 111, 121, 101, 101 }, .fields = { types.types.StructField{ ... }, types.types.StructField{ ... } }, .path = null } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 26 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable mike.person.age
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 4 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .array = codegen.hir.soxa_values.HIRArray{ .elements = { ... }, .element_type = codegen.hir.soxa_types.HIRType.Byte, .capacity = 4, .path = null } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 77 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=Byte, retrieved element type=byte
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .byte = 77 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1000 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable mike.salary
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) firstFold: storage_id=177, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.true }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) secondFold: storage_id=178, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.false }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) thirdFold: storage_id=179, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.both }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) fourthFold: storage_id=180, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.neither }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable firstFold
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable secondFold
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 2 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable thirdFold
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 3 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable fourthFold
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=tetra, b=tetra, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=tetra, b=tetra, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=tetra, b=tetra, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) Bob: storage_id=181, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.true }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) Shakespere: storage_id=182, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.false }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) zombie: storage_id=183, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.both }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) angel: storage_id=184, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.neither }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) alive: storage_id=185, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.true }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 73, 32, 97, 109, 32, 97, 108, 105, 118, 101 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) alive: storage_id=186, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.false }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 73, 32, 97, 109, 32, 100, 101, 97, 100 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) alive: storage_id=187, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.both }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 73, 32, 97, 109, 32, 97, 108, 105, 118, 101 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) alive: storage_id=188, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.neither }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 73, 32, 97, 109, 32, 100, 101, 97, 100 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1737:0: ArraySet: array element_type=Int, trying to assign value type=int
[Debug][Hint] interpreter\vm.zig:1760:0: ArraySet: keeping int value 111111
[Debug][Hint] interpreter\vm.zig:1737:0: ArraySet: array element_type=Int, trying to assign value type=int
[Debug][Hint] interpreter\vm.zig:1760:0: ArraySet: keeping int value 222222
[Debug][Hint] interpreter\vm.zig:1737:0: ArraySet: array element_type=Int, trying to assign value type=int
[Debug][Hint] interpreter\vm.zig:1760:0: ArraySet: keeping int value 333333
[Debug][Hint] interpreter\vm.zig:1737:0: ArraySet: array element_type=Int, trying to assign value type=int
[Debug][Hint] interpreter\vm.zig:1760:0: ArraySet: keeping int value 444444
[Debug][Hint] interpreter\vm.zig:1737:0: ArraySet: array element_type=Int, trying to assign value type=int
[Debug][Hint] interpreter\vm.zig:1760:0: ArraySet: keeping int value 555555
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) arr: storage_id=189, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .int = 111111 }, types.types.TokenLiteral{ .int = 222222 }, types.types.TokenLiteral{ .int = 333333 }, types.types.TokenLiteral{ .int = 444444 }, types.types.TokenLiteral{ .int = 555555 } } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .array = codegen.hir.soxa_values.HIRArray{ .elements = { ... }, .element_type = codegen.hir.soxa_types.HIRType.Int, .capacity = 5, .path = null } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable arr
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=Int, retrieved element type=int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 444444 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1737:0: ArraySet: array element_type=Int, trying to assign value type=int
[Debug][Hint] interpreter\vm.zig:1760:0: ArraySet: keeping int value 666666
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar arr: storage_id=189, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .int = 111111 }, types.types.TokenLiteral{ .int = 222222 }, types.types.TokenLiteral{ .int = 333333 }, types.types.TokenLiteral{ .int = 666666 }, types.types.TokenLiteral{ .int = 555555 } } }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=Int, retrieved element type=int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 666666 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar arr: storage_id=189, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .int = 111111 }, types.types.TokenLiteral{ .int = 222222 }, types.types.TokenLiteral{ .int = 333333 }, types.types.TokenLiteral{ .int = 666666 }, types.types.TokenLiteral{ .int = 555555 }, types.types.TokenLiteral{ .int = 420000 }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=Int, retrieved element type=int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 420000 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) checkAgainst: storage_id=190, value=types.types.TokenLiteral{ .int = 333333 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) initArr: storage_id=191, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 } } }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar initArr: storage_id=191, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 }, types.types.TokenLiteral{ .int = 0 } } }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) floatArr: storage_id=192, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 } } }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar floatArr: storage_id=192, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 }, types.types.TokenLiteral{ .float = 0e0 } } }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) byteArr: storage_id=193, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar byteArr: storage_id=193, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) tetraArr: storage_id=194, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false } } }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar tetraArr: storage_id=194, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false }, types.types.TokenLiteral{ .tetra = types.types.Tetra.false } } }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) strArr: storage_id=195, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar strArr: storage_id=195, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=Int, retrieved element type=int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=Int, retrieved element type=int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=Float, retrieved element type=float
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 0e0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=Float, retrieved element type=float
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 0e0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=Byte, retrieved element type=byte
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .byte = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=Byte, retrieved element type=byte
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .byte = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=Tetra, retrieved element type=tetra
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=Tetra, retrieved element type=tetra
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=String, retrieved element type=string
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = {  } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1666:0: ArrayGet: array element_type=String, retrieved element type=string
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = {  } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) ex: storage_id=196, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.true }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable ex
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) uni: storage_id=197, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.false }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable uni
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) condition: storage_id=198, value=types.types.TokenLiteral{ .string = { 116, 114, 117, 101 } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 114, 117, 101 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable condition
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=199, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=200, value=types.types.TokenLiteral{ .int = 777 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 779 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=201, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=202, value=types.types.TokenLiteral{ .int = 777 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 782 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) un1: storage_id=203, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) un2: storage_id=204, value=types.types.TokenLiteral{ .float = 3.5e0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) value: storage_id=205, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 105, 110, 116, 101, 103, 101, 114 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) value: storage_id=206, value=types.types.TokenLiteral{ .float = 3.5e0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=float, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=float, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 108, 111, 97, 116 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) value: storage_id=207, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 3 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) value: storage_id=208, value=types.types.TokenLiteral{ .float = 3.5e0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=float, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=float, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) value: storage_id=209, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 3 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) value: storage_id=210, value=types.types.TokenLiteral{ .float = 3.5e0 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=float, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) value: storage_id=211, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:989:0: DBG StoreConst newun: storage_id=?, token_type=INT, type_info=Int, token_literal=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) newun: storage_id=212, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:989:0: DBG StoreConst resint: storage_id=?, token_type=INT, type_info=Int, token_literal=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) resint: storage_id=213, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:1141:0: DBG Compare Eq: a=int, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:989:0: DBG StoreConst resfloat: storage_id=?, token_type=INT, type_info=Int, token_literal=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) resfloat: storage_id=214, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:884:0: DBG LoadVar resint: storage_id=213, token_type=INT, type_info=Int, token_literal=types.types.TokenLiteral{ .int = 3 }, hir_tag=int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 3 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable resint
[Debug][Hint] interpreter\vm.zig:884:0: DBG LoadVar resfloat: storage_id=214, token_type=INT, type_info=Int, token_literal=types.types.TokenLiteral{ .int = 0 }, hir_tag=int
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable resfloat
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) Map: storage_id=215, value=types.types.TokenLiteral{ .map = hash_map.HashMap([]const u8,types.types.TokenLiteral,hash_map.StringContext,80){ .unmanaged = hash_map.HashMapUnmanaged([]const u8,types.types.TokenLiteral,hash_map.StringContext,80){ .metadata = hash_map.HashMapUnmanaged([]const u8,types.types.TokenLiteral,hash_map.StringContext,80).Metadata@1a9fba958c0, .size = 3, .available = 3, .pointer_stability = debug.SafetyLock{ ... } }, .allocator = mem.Allocator{ .ptr = anyopaque@3d26de6140, .vtable = mem.Allocator.VTable{ ... } }, .ctx = hash_map.StringContext{ } } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.5e0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 3.5e0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) brokenLine: storage_id=216, value=types.types.TokenLiteral{ .int = -58 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -58 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable brokenLine
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) alive: storage_id=217, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.true }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 73, 32, 97, 109, 32, 97, 108, 105, 118, 101 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) alive: storage_id=218, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.false }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 73, 32, 97, 109, 32, 100, 101, 97, 100 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) alive: storage_id=219, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.both }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 73, 32, 97, 109, 32, 97, 108, 105, 118, 101 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) alive: storage_id=220, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.neither }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 73, 32, 97, 109, 32, 100, 101, 97, 100 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) s: storage_id=221, value=types.types.TokenLiteral{ .string = { 104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100 } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 104, 101, 108, 108, 111 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 119, 111, 114, 108, 100 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) _int: storage_id=222, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar _int: storage_id=222, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable _int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) _float: storage_id=223, value=types.types.TokenLiteral{ .float = 0e0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar _float: storage_id=223, value=types.types.TokenLiteral{ .float = 0e0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 0e0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable _float
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) _byte: storage_id=224, value=types.types.TokenLiteral{ .byte = 0 }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar _byte: storage_id=224, value=types.types.TokenLiteral{ .byte = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .byte = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable _byte
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) _tetra: storage_id=225, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.false }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar _tetra: storage_id=225, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.false }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable _tetra
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) _string: storage_id=226, value=types.types.TokenLiteral{ .string = {  } }
[Debug][Hint] interpreter\vm.zig:949:0: DBG WRITE StoreVar _string: storage_id=226, value=types.types.TokenLiteral{ .string = {  } }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = {  } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable _string
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 105, 110, 116 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 98, 121, 116, 101 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 102, 108, 111, 97, 116 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 115, 116, 114, 105, 110, 103 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 101, 116, 114, 97 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 97, 114, 114, 97, 121 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 115, 116, 114, 117, 99, 116 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 69, 109, 112, 108, 111, 121, 101, 101 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 101, 110, 117, 109 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 67, 111, 108, 111, 114 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 109, 97, 112 } }, .field_name = null, .scope_refs = 0 }
[Runtime][Error][E1001] Cannot convert float to integer for arithmetic
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Runtime][Error][E1001] Cannot convert float to integer for arithmetic
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Runtime][Error][E1001] Cannot convert float to integer for arithmetic
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Runtime][Error][E1001] Cannot convert float to integer for arithmetic
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Runtime][Error][E1001] Cannot convert float to integer for arithmetic
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Runtime][Error][E1001] Cannot convert float to integer for arithmetic
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Runtime][Error][E1001] Cannot convert float to integer for arithmetic
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Runtime][Error][E1001] Cannot convert float to integer for arithmetic
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:968:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1223:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1234:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Runtime][Error][E1001] Cannot convert float to integer for arithmetic
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Runtime][Error][E1001] Cannot convert float to integer for arithmetic
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1772:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1788:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Runtime][Error][E1001] Cannot convert float to integer for arithmetic
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1217:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1228:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1241:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1247:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1241:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1247:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3848:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1253:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3848:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1241:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1247:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .float = 1.6e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.6e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './tmp_rovodev_debug_test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\tmp_rovodev_debug_test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1241:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1247:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1241:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1247:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable test1
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for test1
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable test2
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for test2
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable test3
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for test3
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable test4
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for test4
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable test5
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for test5
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 1 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./tmp_rovodev_debug_test.doxa -> out/tmp_rovodev_debug_test.soxa (50 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 44 instructions, 8 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) test1: storage_id=5, value=types.types.TokenLiteral{ .int = 4 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) test2: storage_id=6, value=types.types.TokenLiteral{ .int = 6 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) test3: storage_id=7, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) test4: storage_id=8, value=types.types.TokenLiteral{ .int = 50 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) test5: storage_id=9, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 4 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable test1
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 6 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable test2
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable test3
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 50 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable test4
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable test5
[Debug][Hint] main.zig:399:0: Debug: Processing script: './tmp_rovodev_simple_div_test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\tmp_rovodev_simple_div_test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1241:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1247:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable a
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for a
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable b
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for b
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable result
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for result
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./tmp_rovodev_simple_div_test.doxa -> out/tmp_rovodev_simple_div_test.soxa (26 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 23 instructions, 2 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=3, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=4, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) result: storage_id=5, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 5 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable a
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable b
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable result
[Debug][Hint] main.zig:399:0: Debug: Processing script: './tmp_rovodev_division_debug.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\tmp_rovodev_division_debug.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1241:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1247:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1241:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1247:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable a
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for a
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable b
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for b
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable div1
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for div1
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable div2
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for div2
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./tmp_rovodev_division_debug.doxa -> out/tmp_rovodev_division_debug.soxa (37 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 31 instructions, 4 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=4, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=5, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) div1: storage_id=6, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) div2: storage_id=7, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 5 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable a
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable b
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable div1
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 5 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable div2
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1241:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1247:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1241:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1247:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3848:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1253:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3848:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1241:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1247:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3799:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1803:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .float = 1.6e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.6e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1291:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1302:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3854:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1248:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3854:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .float = 1.6e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.6e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3854:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1248:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3854:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .float = 1.6e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.6e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3854:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1248:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3854:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3807:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1782:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1798:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (112 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 102 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .float = 1.6e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .float = 6.4e1 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.6e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 6.4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3893:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1248:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3893:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Runtime][Error][E1001] Unknown built-in function: powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 6 }
[Runtime][Error][E1001] Unknown built-in function: powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 6 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 6 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 6 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3893:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1248:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3893:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3893:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1248:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3893:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3893:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1248:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3893:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1236:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1242:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3846:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1821:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1837:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1292:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1303:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:486:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:403:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:423:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:490:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:424:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:491:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:424:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:491:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:399:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:419:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:424:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:491:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:398:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:418:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:423:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:490:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr8
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 6 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (116 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 106 instructions, 22 constants

[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr1: storage_id=10, value=types.types.TokenLiteral{ .int = 25 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr2: storage_id=11, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr3: storage_id=12, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr4: storage_id=13, value=types.types.TokenLiteral{ .int = 14 }
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr5: storage_id=14, value=types.types.TokenLiteral{ .int = 16 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2100:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr6: storage_id=15, value=types.types.TokenLiteral{ .int = 64 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) a: storage_id=16, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) b: storage_id=17, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr7: storage_id=18, value=types.types.TokenLiteral{ .int = 15 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr8: storage_id=19, value=types.types.TokenLiteral{ .int = -75 }
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr1
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr2
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr3
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 14 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr4
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr5
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr6
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 15 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr7
[Debug][Hint] interpreter\vm.zig:1298:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = -75 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1309:0: Peek instruction for variable expr8
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3855:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3855:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3855:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3902:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3855:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3902:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (20 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 20 instructions, 5 constants

[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr: storage_id=1, value=types.types.TokenLiteral{ .int = 1026 }
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1026 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1307:0: Peek instruction for variable expr
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3855:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr29
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (10 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 10 instructions, 2 constants

[Debug][Hint] interpreter\vm.zig:1157:0: FLOATARITH Add: a=float, b=float
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr29: storage_id=1, value=types.types.TokenLiteral{ .float = 1.000000000001e6 }
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.000000000001e6 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1307:0: Peek instruction for variable expr29
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3855:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for expr29
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (10 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 10 instructions, 2 constants

[Debug][Hint] interpreter\vm.zig:1157:0: FLOATARITH Add: a=float, b=float
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) expr29: storage_id=1, value=types.types.TokenLiteral{ .float = 1.000000000001e6 }
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.000000000001e6 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1307:0: Peek instruction for variable expr29
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3855:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3902:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3855:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3902:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3855:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3902:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3855:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3902:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3855:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3902:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3855:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3902:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (42 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 42 instructions, 9 constants

[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 512 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) v_expr: storage_id=2, value=types.types.TokenLiteral{ .int = 512 }
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) c_expr: storage_id=3, value=types.types.TokenLiteral{ .int = 512 }
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 512 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1307:0: Peek instruction for variable v_expr
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 512 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1307:0: Peek instruction for variable c_expr
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3861:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3908:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3861:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3908:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3861:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3908:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3861:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3908:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3861:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3908:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3861:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3908:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (42 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 42 instructions, 9 constants

[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 512 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) v_expr: storage_id=2, value=types.types.TokenLiteral{ .int = 512 }
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) c_expr: storage_id=3, value=types.types.TokenLiteral{ .int = 512 }
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 512 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1307:0: Peek instruction for variable v_expr
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 512 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1307:0: Peek instruction for variable c_expr
[Debug][Hint] main.zig:395:0: Debug: Processing script: 'test/misc/expressions.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\misc\expressions.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable const_a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable const_b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr9
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr9
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr10
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr10
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr11
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr11
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr12
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr12
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr13
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr13
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr14
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr14
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr15
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr15
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr16
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr16
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr17
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr17
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr18
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr18
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr19
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr19
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr20
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr20
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr21
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr21
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr22
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr22
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr23
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr23
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr24
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr24
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr25
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr25
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr26
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr26
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr27
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr27
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr28
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr28
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr30
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr30
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr31
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr31
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr32
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr32
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr33
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr33
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr34
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr34
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr35
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr35
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr36
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr36
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr37
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr37
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr38
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr38
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr39
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr39
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr40
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr40
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr41
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr41
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr42
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr42
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr9
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr9
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr10
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr10
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr11
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr11
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr12
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr12
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr13
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr13
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr14
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr14
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr15
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr15
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr16
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr16
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr17
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr17
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr18
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr18
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr19
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr19
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr20
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr20
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr21
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr21
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr22
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr22
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr23
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr23
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr24
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr24
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr25
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr25
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr26
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr26
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr27
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr27
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr28
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr28
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr30
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr30
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr31
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr31
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr32
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr32
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr33
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr33
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr34
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr34
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr35
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr35
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr36
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr36
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr37
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr37
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr38
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr38
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr39
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr39
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr40
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr40
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr41
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr41
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr42
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr42
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 27 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled test/misc/expressions.doxa -> out/expressions.soxa (1457 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 1457 instructions, 334 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) var_a: storage_id=88, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) var_b: storage_id=89, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) const_a: storage_id=90, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) const_b: storage_id=91, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:1157:0: FLOATARITH Div: a=float, b=float
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=float, b=int
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.1e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:1157:0: FLOATARITH Div: a=float, b=float
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=float, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=float, b=float
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.6e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Tetra->Int: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:1157:0: FLOATARITH Div: a=float, b=float
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=float
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 5.05e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] main.zig:395:0: Debug: Processing script: 'test/misc/expressions.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\misc\expressions.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable const_a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable const_b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr9
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr9
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr10
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr10
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr11
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr11
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr12
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr12
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr13
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr13
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr14
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr14
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr15
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr15
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr16
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr16
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr17
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr17
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr18
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr18
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr19
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr19
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr20
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr20
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr21
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr21
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr22
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr22
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr23
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr23
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr24
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr24
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr25
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr25
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr26
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr26
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr27
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr27
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr28
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr28
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr30
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr30
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr31
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr31
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr32
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr32
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr33
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr33
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr34
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr34
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr35
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr35
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr36
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr36
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr37
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr37
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr38
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr38
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr39
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr39
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr40
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr40
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr41
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr41
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr42
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr42
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr9
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr9
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr10
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr10
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr11
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr11
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr12
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr12
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr13
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr13
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr14
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr14
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr15
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr15
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr16
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr16
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr17
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr17
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr18
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr18
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr19
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr19
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr20
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr20
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr21
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr21
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr22
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr22
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr23
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr23
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr24
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr24
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr25
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr25
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr26
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr26
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr27
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr27
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr28
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr28
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr30
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr30
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr31
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr31
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr32
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr32
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr33
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr33
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr34
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr34
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr35
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr35
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr36
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr36
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr37
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr37
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr38
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr38
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr39
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr39
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr40
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr40
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr41
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr41
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr42
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr42
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 27 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled test/misc/expressions.doxa -> out/expressions.soxa (1457 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 1457 instructions, 334 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) var_a: storage_id=88, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) var_b: storage_id=89, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) const_a: storage_id=90, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) const_b: storage_id=91, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:1157:0: FLOATARITH Div: a=float, b=float
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=float, b=int
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.1e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:1157:0: FLOATARITH Div: a=float, b=float
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=float, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=float, b=float
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.6e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Tetra->Int: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:1157:0: FLOATARITH Div: a=float, b=float
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=float
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 5.05e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] main.zig:395:0: Debug: Processing script: 'test/misc/expressions.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\misc\expressions.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable const_a has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable const_b has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr9
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr9
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr10
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr10
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr11
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr11
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr12
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr12
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr13
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr13
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr14
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr14
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr15
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr15
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr16
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr16
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr17
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr17
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr18
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr18
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr19
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr19
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr20
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr20
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr21
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr21
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr22
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr22
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr23
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr23
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr24
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr24
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr25
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr25
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr26
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr26
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr27
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr27
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr28
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr28
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr30
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr30
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr31
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr31
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr32
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr32
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr33
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr33
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr34
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr34
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr35
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr35
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr36
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr36
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr37
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr37
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr38
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr38
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr39
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr39
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr40
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr40
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr41
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr41
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable v_expr42
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for v_expr42
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Tetra ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Tetra, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1249:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MODULO Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MODULO: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float PLUS Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Float SLASH Float
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Float, right_type=Float, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int ASTERISK Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op ASTERISK: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int SLASH Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op SLASH: left_type=Int, right_type=Int, result_type=Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1234:0: GEN DIV: Converting both operands to Float for division
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:1237:0: Converting left operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1243:0: Converting right operand from Int to Float

[Debug][Hint] codegen\hir\soxa_generator.zig:1292:0: EMIT FloatArith.Div (division returns float)
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr1
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr2
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr3
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr4
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr5
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr6
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr7
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr8
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr9
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr9
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr10
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr10
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr11
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr11
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr12
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr12
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr13
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr13
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr14
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr14
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr15
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr15
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr16
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr16
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr17
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr17
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr18
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr18
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr19
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr19
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr20
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr20
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr21
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr21
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr22
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr22
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr23
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr23
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr24
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr24
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr25
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr25
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr26
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr26
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr27
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr27
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr28
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr28
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr29
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr30
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr30
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr31
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr31
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr32
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr32
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr33
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr33
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr34
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr34
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr35
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr35
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr36
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr36
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr37
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr37
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr38
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr38
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr39
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr39
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr40
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr40
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr41
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr41
[Debug][Hint] codegen\hir\soxa_generator.zig:1823:0: Checking union members for variable c_expr42
[Debug][Hint] codegen\hir\soxa_generator.zig:1839:0: No union members found for c_expr42
[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 27 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled test/misc/expressions.doxa -> out/expressions.soxa (1457 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 1457 instructions, 334 constants

[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) var_a: storage_id=88, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:962:0: DBG WRITE StoreVar (create) var_b: storage_id=89, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) const_a: storage_id=90, value=types.types.TokenLiteral{ .int = 5 }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) const_b: storage_id=91, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 25 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:1157:0: FLOATARITH Div: a=float, b=float
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=float, b=int
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.1e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:1157:0: FLOATARITH Div: a=float, b=float
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=float, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=float, b=float
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1.6e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Tetra->Int: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 16 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 64 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:1157:0: FLOATARITH Div: a=float, b=float
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=float
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 5.05e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Add: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Sub: a=int, b=int
[Debug][Hint] interpreter\vm.zig:1040:0: INTARITH Mul: a=int, b=int
[Debug][Hint] main.zig:395:0: Debug: Processing script: 'tmp_rovodev_pow.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\tmp_rovodev_pow.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Tetra, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3849:0: inferBinaryOpResultType: Int POWER Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3896:0: inferBinaryOpResultType: result = Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op POWER: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1255:0: Converting right operand from Tetra to Int

[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled tmp_rovodev_pow.doxa -> out/tmp_rovodev_pow.soxa (15 HIR instructions)

[Debug][Hint] main.zig:487:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 15 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:2098:0: CALL powi
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Tetra->Int: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> int
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Int->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:2630:0: CONVERT Tetra->Float: in=int
[Debug][Hint] interpreter\vm.zig:2668:0: CONVERT RESULT -> float
[Debug][Hint] interpreter\vm.zig:2098:0: CALL power
[Debug][Hint] interpreter\vm.zig:1296:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 5.12e2 }, .field_name = null, .scope_refs = 0 }
[CompileTime][Error][E1021] unknown:0:0: FATAL: Unknown type found in Convert instruction at IP 326 (from: Unknown, to: Int). Type inference likely failed during code generation.
[CompileTime][Error][E1021] unknown:0:0: FATAL: Unknown type found in Convert instruction at IP 336 (from: Unknown, to: Int). Type inference likely failed during code generation.
[CompileTime][Error][E1021] unknown:0:0: FATAL: Unknown type found in Convert instruction at IP 336 (from: Unknown, to: Int). Type inference likely failed during code generation.
[CompileTime][Error][E6001] ./test.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E1021] unknown:0:0: FATAL: Unknown type found in Convert instruction at IP 615 (from: Unknown, to: Int). Type inference likely failed during code generation.
[CompileTime][Error][E6001] ./test.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E1021] unknown:0:0: FATAL: Unknown type found in Convert instruction at IP 615 (from: Unknown, to: Int). Type inference likely failed during code generation.
[CompileTime][Error][E6001] ./test.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E1021] unknown:0:0: FATAL: Unknown type found in Convert instruction at IP 615 (from: Unknown, to: Int). Type inference likely failed during code generation.
[CompileTime][Error][E1021] unknown:0:0: FATAL: Unknown type found in Convert instruction at IP 10 (from: Unknown, to: Int). Type inference likely failed during code generation.
[CompileTime][Error][E1021] unknown:0:0: FATAL: Unknown type found in Convert instruction at IP 10 (from: Unknown, to: Int). Type inference likely failed during code generation.
[CompileTime][Error][E1021] unknown:0:0: FATAL: Unknown type found in Convert instruction at IP 10 (from: Unknown, to: Int). Type inference likely failed during code generation.
[CompileTime][Error][E1021] unknown:0:0: FATAL: Unknown type found in Convert instruction at IP 10 (from: Unknown, to: Int). Type inference likely failed during code generation.
[Debug][Hint] main.zig:390:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:410:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:415:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable red has type base: Custom
[Debug][Hint] codegen\hir\soxa_generator.zig:1771:0: Checking union members for variable red
[Debug][Hint] codegen\hir\soxa_generator.zig:1787:0: No union members found for red
[Debug][Hint] codegen\hir\soxa_generator.zig:3808:0: inferBinaryOpResultType: Enum EQUALITY Enum
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Enum, right_type=Enum, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1253:0: Converting left operand from Enum to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1259:0: Converting right operand from Enum to Int

[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (26 HIR instructions)

[Debug][Hint] main.zig:482:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 26 instructions, 5 constants

[CompileTime][Error][E1021] unknown:0:0: FATAL: Unknown type found in Convert instruction at IP 10 (from: Unknown, to: Int). Type inference likely failed during code generation.
[Debug][Hint] main.zig:390:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:410:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:415:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable red has type base: Custom
[Debug][Hint] codegen\hir\soxa_generator.zig:1777:0: Checking union members for variable red
[Debug][Hint] codegen\hir\soxa_generator.zig:1793:0: No union members found for red
[Debug][Hint] codegen\hir\soxa_generator.zig:3814:0: inferBinaryOpResultType: Enum EQUALITY Enum
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Enum, right_type=Enum, result_type=Int

[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (24 HIR instructions)

[Debug][Hint] main.zig:482:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 24 instructions, 5 constants

[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) Color: storage_id=2, value=types.types.TokenLiteral{ .string = { 67, 111, 108, 111, 114 } }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) red: storage_id=3, value=types.types.TokenLiteral{ .enum_variant = { 82, 101, 100 } }
[Debug][Hint] interpreter\vm.zig:1253:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .enum_variant = codegen.hir.soxa_values.HIREnum{ .type_name = { ... }, .variant_name = { ... }, .variant_index = 0, .path = null } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1264:0: Peek instruction for variable red
[Debug][Hint] interpreter\vm.zig:1177:0: DBG Compare Eq: a=enum_variant, b=enum_variant, operand_type=Enum
[Debug][Hint] interpreter\vm.zig:1253:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 82, 101, 100 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] main.zig:390:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:410:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:415:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable red has type base: Custom
[Debug][Hint] codegen\hir\soxa_generator.zig:1777:0: Checking union members for variable red
[Debug][Hint] codegen\hir\soxa_generator.zig:1793:0: No union members found for red
[Debug][Hint] codegen\hir\soxa_generator.zig:3814:0: inferBinaryOpResultType: Enum EQUALITY Enum
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Enum, right_type=Enum, result_type=Int

[Debug][Hint] main.zig:176:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:198:0: >> Compiled ./test.doxa -> out/test.soxa (24 HIR instructions)

[Debug][Hint] main.zig:482:0: >> Executing with HIR VM

[Debug][Hint] main.zig:209:0: >> Loaded SOXA: 24 instructions, 5 constants

[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) Color: storage_id=2, value=types.types.TokenLiteral{ .string = { 67, 111, 108, 111, 114 } }
[Debug][Hint] interpreter\vm.zig:1029:0: DBG WRITE StoreConst (create) red: storage_id=3, value=types.types.TokenLiteral{ .enum_variant = { 82, 101, 100 } }
[Debug][Hint] interpreter\vm.zig:1253:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .enum_variant = codegen.hir.soxa_values.HIREnum{ .type_name = { ... }, .variant_name = { ... }, .variant_index = 0, .path = null } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1264:0: Peek instruction for variable red
[Debug][Hint] interpreter\vm.zig:1177:0: DBG Compare Eq: a=enum_variant, b=enum_variant, operand_type=Enum
[Debug][Hint] interpreter\vm.zig:1253:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 82, 101, 100 } }, .field_name = null, .scope_refs = 0 }
[CompileTime][Error][E6001] ./test_calc.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:49:9: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:40:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:49:9: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:36:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:43:9: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:36:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:44:9: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:36:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:44:9: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:36:5: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:44:9: ForEach requires array or string type, got Union
[CompileTime][Error][E6001] ./test_calc.doxa:36:5: ForEach requires array or string type, got Union
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable red has type base: Custom
[Debug][Hint] codegen\hir\soxa_generator.zig:1868:0: Checking union members for variable red
[Debug][Hint] codegen\hir\soxa_generator.zig:1884:0: No union members found for red
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Enum EQUALITY Enum
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Enum, right_type=Enum, result_type=Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (24 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 21 instructions, 5 constants

[Debug][Hint] interpreter\vm.zig:1060:0: DBG WRITE StoreConst (create) Color: storage_id=2, value=types.types.TokenLiteral{ .string = { 67, 111, 108, 111, 114 } }
[Debug][Hint] interpreter\vm.zig:1060:0: DBG WRITE StoreConst (create) red: storage_id=3, value=types.types.TokenLiteral{ .enum_variant = { 82, 101, 100 } }
[Debug][Hint] interpreter\vm.zig:1208:0: DBG Compare Eq: a=enum_variant, b=enum_variant, operand_type=Enum
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable red has type base: Custom
[Debug][Hint] codegen\hir\soxa_generator.zig:1868:0: Checking union members for variable red
[Debug][Hint] codegen\hir\soxa_generator.zig:1884:0: No union members found for red
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Enum EQUALITY Enum
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Enum, right_type=Enum, result_type=Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (24 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 21 instructions, 5 constants

[Debug][Hint] interpreter\vm.zig:1060:0: DBG WRITE StoreConst (create) Color: storage_id=2, value=types.types.TokenLiteral{ .string = { 67, 111, 108, 111, 114 } }
[Debug][Hint] interpreter\vm.zig:1060:0: DBG WRITE StoreConst (create) red: storage_id=3, value=types.types.TokenLiteral{ .enum_variant = { 82, 101, 100 } }
[Debug][Hint] interpreter\vm.zig:1208:0: DBG Compare Eq: a=enum_variant, b=enum_variant, operand_type=Enum
[Debug][Hint] interpreter\vm.zig:1220:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:1252:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=then_2
[Debug][Hint] interpreter\vm.zig:1257:0: DBG JumpCond: jumping to IP 12 (label: then_2)
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable red has type base: Custom
[Debug][Hint] codegen\hir\soxa_generator.zig:1868:0: Checking union members for variable red
[Debug][Hint] codegen\hir\soxa_generator.zig:1884:0: No union members found for red
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Enum EQUALITY Enum
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Enum, right_type=Enum, result_type=Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (24 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 21 instructions, 5 constants

[Debug][Hint] interpreter\vm.zig:1060:0: DBG WRITE StoreConst (create) Color: storage_id=2, value=types.types.TokenLiteral{ .string = { 67, 111, 108, 111, 114 } }
[Debug][Hint] interpreter\vm.zig:1060:0: DBG WRITE StoreConst (create) red: storage_id=3, value=types.types.TokenLiteral{ .enum_variant = { 82, 101, 100 } }
[Debug][Hint] interpreter\vm.zig:1208:0: DBG Compare Eq: a=enum_variant, b=enum_variant, operand_type=Enum
[Debug][Hint] interpreter\vm.zig:1220:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:1252:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=then_2
[Debug][Hint] interpreter\vm.zig:1257:0: DBG JumpCond: jumping to IP 12 (label: then_2)
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable red has type base: Custom
[Debug][Hint] codegen\hir\soxa_generator.zig:1868:0: Checking union members for variable red
[Debug][Hint] codegen\hir\soxa_generator.zig:1884:0: No union members found for red
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Enum EQUALITY Enum
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Enum, right_type=Enum, result_type=Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (24 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 21 instructions, 5 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) Color: storage_id=2, value=types.types.TokenLiteral{ .string = { 67, 111, 108, 111, 114 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) red: storage_id=3, value=types.types.TokenLiteral{ .enum_variant = { 82, 101, 100 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=enum_variant, b=enum_variant, operand_type=Enum
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=then_2
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 12 (label: then_2)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable red has type base: Custom
[Debug][Hint] codegen\hir\soxa_generator.zig:1868:0: Checking union members for variable red
[Debug][Hint] codegen\hir\soxa_generator.zig:1884:0: No union members found for red
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Enum EQUALITY Enum
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Enum, right_type=Enum, result_type=Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (24 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 24 instructions, 5 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) Color: storage_id=2, value=types.types.TokenLiteral{ .string = { 67, 111, 108, 111, 114 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) red: storage_id=3, value=types.types.TokenLiteral{ .enum_variant = { 82, 101, 100 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Show
[Debug][Hint] interpreter\vm.zig:1436:0: DBG Show: executing Show instruction
[Debug][Hint] interpreter\vm.zig:1438:0: Show called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .enum_variant = codegen.hir.soxa_values.HIREnum{ .type_name = { ... }, .variant_name = { ... }, .variant_index = 0, .path = null } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=enum_variant, b=enum_variant, operand_type=Enum
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=then_2
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 13 (label: then_2)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Show
[Debug][Hint] interpreter\vm.zig:1436:0: DBG Show: executing Show instruction
[Debug][Hint] interpreter\vm.zig:1438:0: Show called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 82, 101, 100 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (10 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 10 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Show
[Debug][Hint] interpreter\vm.zig:1436:0: DBG Show: executing Show instruction
[Debug][Hint] interpreter\vm.zig:1438:0: Show called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 32, 32, 32, 32, 32, 32, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Show
[Debug][Hint] interpreter\vm.zig:1436:0: DBG Show: executing Show instruction
[Debug][Hint] interpreter\vm.zig:1438:0: Show called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 34 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Show
[Debug][Hint] interpreter\vm.zig:1436:0: DBG Show: executing Show instruction
[Debug][Hint] interpreter\vm.zig:1438:0: Show called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 33 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] main.zig:395:0: Debug: Processing script: './test/examples/brainfuck.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\examples\brainfuck.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable symbols has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tape has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loops has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loopSpot has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable ip has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable userInput has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable newByte has type base: Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int GREATER_EQUAL Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op GREATER_EQUAL: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Byte EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable pointer has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable openBrackets has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable closedBrackets has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Byte PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from Byte to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Byte MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from Byte to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 5 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test/examples/brainfuck.doxa -> out/brainfuck.soxa (367 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 367 instructions, 63 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) symbols: storage_id=23, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tape: storage_id=24, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar tape: storage_id=24, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) loops: storage_id=25, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) loopSpot: storage_id=26, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar loopSpot: storage_id=26, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tp: storage_id=27, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) ip: storage_id=28, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 360 at IP 360: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 361 at IP 361: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 362 at IP 362: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 363 at IP 363: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 364 at IP 364: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 211 at IP 211: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 212 at IP 212: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 213 at IP 213: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) scan: storage_id=29, value=types.types.TokenLiteral{ .string = { 44, 43, 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 214 at IP 214: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 215 at IP 215: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 216 at IP 216: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 217 at IP 217: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) scanLength: storage_id=30, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 218 at IP 218: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 219 at IP 219: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 154 at IP 154: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 155 at IP 155: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 156 at IP 156: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) scan: storage_id=31, value=types.types.TokenLiteral{ .string = { 44, 43, 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 157 at IP 157: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 158 at IP 158: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 159 at IP 159: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 160 at IP 160: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 161 at IP 161: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) openBrackets: storage_id=33, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_21
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 204 (label: while_end_21)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 204 at IP 204: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 205 at IP 205: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 206 at IP 206: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 207 at IP 207: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 208 at IP 208: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 209 at IP 209: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 220 at IP 220: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 221 at IP 221: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) closedBrackets: storage_id=34, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.true }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 222 at IP 222: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 223 at IP 223: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=assert_success_29
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 227 (label: assert_success_29)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 227 at IP 227: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 44 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 249 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 249 at IP 249: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 250 at IP 250: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 251 at IP 251: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 252 at IP 252: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 253 at IP 253: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 254 at IP 254: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 262 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 262 at IP 262: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 263 at IP 263: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 264 at IP 264: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 265 at IP 265: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 266 at IP 266: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 267 at IP 267: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 281 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 281 at IP 281: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 282 at IP 282: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 283 at IP 283: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 284 at IP 284: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 285 at IP 285: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 286 at IP 286: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 300 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 300 at IP 300: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 301 at IP 301: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 302 at IP 302: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 303 at IP 303: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 304 at IP 304: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 305 at IP 305: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 314 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 314 at IP 314: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 315 at IP 315: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 316 at IP 316: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 317 at IP 317: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 318 at IP 318: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 319 at IP 319: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 328 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 328 at IP 328: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 329 at IP 329: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 330 at IP 330: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 331 at IP 331: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 332 at IP 332: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 333 at IP 333: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 338 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 339 at IP 339: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 340 at IP 340: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 341 at IP 341: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 342 at IP 342: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 343 at IP 343: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 348 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 349 at IP 349: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 350 at IP 350: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 351 at IP 351: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 352 at IP 352: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 353 at IP 353: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) ip: storage_id=36, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 43 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 249 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 249 at IP 249: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 250 at IP 250: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 251 at IP 251: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 252 at IP 252: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 253 at IP 253: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 254 at IP 254: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 262 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 262 at IP 262: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 263 at IP 263: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 264 at IP 264: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 265 at IP 265: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 266 at IP 266: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 267 at IP 267: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 281 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 281 at IP 281: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 282 at IP 282: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 283 at IP 283: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 284 at IP 284: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 285 at IP 285: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 286 at IP 286: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 300 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 300 at IP 300: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 301 at IP 301: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 302 at IP 302: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 303 at IP 303: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 304 at IP 304: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 305 at IP 305: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 314 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 314 at IP 314: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 315 at IP 315: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 316 at IP 316: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 317 at IP 317: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 318 at IP 318: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 319 at IP 319: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 328 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 328 at IP 328: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 329 at IP 329: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 330 at IP 330: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 331 at IP 331: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 332 at IP 332: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 333 at IP 333: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 338 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 339 at IP 339: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 340 at IP 340: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 341 at IP 341: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 342 at IP 342: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 343 at IP 343: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 348 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 349 at IP 349: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 350 at IP 350: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 351 at IP 351: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 352 at IP 352: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 353 at IP 353: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar ip: storage_id=36, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 249 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 249 at IP 249: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 250 at IP 250: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 251 at IP 251: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 252 at IP 252: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 253 at IP 253: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 254 at IP 254: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 262 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 262 at IP 262: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 263 at IP 263: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 264 at IP 264: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 265 at IP 265: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 266 at IP 266: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 267 at IP 267: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 281 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 281 at IP 281: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 282 at IP 282: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 283 at IP 283: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 284 at IP 284: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 285 at IP 285: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 286 at IP 286: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 300 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 300 at IP 300: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 301 at IP 301: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 302 at IP 302: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 303 at IP 303: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 304 at IP 304: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 305 at IP 305: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 314 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 314 at IP 314: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 315 at IP 315: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 316 at IP 316: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 317 at IP 317: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 318 at IP 318: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 319 at IP 319: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 328 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 328 at IP 328: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 329 at IP 329: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 330 at IP 330: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 331 at IP 331: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 332 at IP 332: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 333 at IP 333: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 338 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 339 at IP 339: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 340 at IP 340: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 341 at IP 341: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 342 at IP 342: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 343 at IP 343: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 348 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 349 at IP 349: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 350 at IP 350: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 351 at IP 351: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 352 at IP 352: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 353 at IP 353: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar ip: storage_id=36, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_32
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 356 (label: while_end_32)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 356 at IP 356: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 357 at IP 357: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 358 at IP 358: ExitScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 359 at IP 359: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 365 at IP 365: ExitScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 366 at IP 366: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: 'test/examples/brainfuck.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\examples\brainfuck.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable symbols has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tape has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loops has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loopSpot has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable ip has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable userInput has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable newByte has type base: Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int GREATER_EQUAL Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op GREATER_EQUAL: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Byte EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable pointer has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable openBrackets has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable closedBrackets has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Byte PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from Byte to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Byte MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from Byte to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 5 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled test/examples/brainfuck.doxa -> out/brainfuck.soxa (367 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 367 instructions, 63 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) symbols: storage_id=23, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tape: storage_id=24, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar tape: storage_id=24, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) loops: storage_id=25, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) loopSpot: storage_id=26, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar loopSpot: storage_id=26, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tp: storage_id=27, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) ip: storage_id=28, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 360 at IP 360: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 361 at IP 361: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 362 at IP 362: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 363 at IP 363: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 364 at IP 364: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 211 at IP 211: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 212 at IP 212: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 213 at IP 213: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) scan: storage_id=29, value=types.types.TokenLiteral{ .string = { 44, 43, 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 214 at IP 214: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 215 at IP 215: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 216 at IP 216: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 217 at IP 217: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) scanLength: storage_id=30, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 218 at IP 218: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 219 at IP 219: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 154 at IP 154: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 155 at IP 155: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 156 at IP 156: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) scan: storage_id=31, value=types.types.TokenLiteral{ .string = { 44, 43, 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 157 at IP 157: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 158 at IP 158: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 159 at IP 159: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 160 at IP 160: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 161 at IP 161: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) openBrackets: storage_id=33, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_21
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 204 (label: while_end_21)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 204 at IP 204: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 205 at IP 205: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 206 at IP 206: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 207 at IP 207: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 208 at IP 208: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 209 at IP 209: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 220 at IP 220: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 221 at IP 221: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) closedBrackets: storage_id=34, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.true }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 222 at IP 222: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 223 at IP 223: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=assert_success_29
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 227 (label: assert_success_29)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 227 at IP 227: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 44 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 249 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 249 at IP 249: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 250 at IP 250: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 251 at IP 251: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 252 at IP 252: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 253 at IP 253: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 254 at IP 254: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 262 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 262 at IP 262: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 263 at IP 263: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 264 at IP 264: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 265 at IP 265: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 266 at IP 266: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 267 at IP 267: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 281 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 281 at IP 281: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 282 at IP 282: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 283 at IP 283: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 284 at IP 284: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 285 at IP 285: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 286 at IP 286: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 300 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 300 at IP 300: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 301 at IP 301: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 302 at IP 302: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 303 at IP 303: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 304 at IP 304: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 305 at IP 305: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 314 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 314 at IP 314: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 315 at IP 315: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 316 at IP 316: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 317 at IP 317: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 318 at IP 318: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 319 at IP 319: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 328 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 328 at IP 328: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 329 at IP 329: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 330 at IP 330: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 331 at IP 331: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 332 at IP 332: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 333 at IP 333: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 338 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 339 at IP 339: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 340 at IP 340: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 341 at IP 341: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 342 at IP 342: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 343 at IP 343: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 348 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 349 at IP 349: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 350 at IP 350: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 351 at IP 351: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 352 at IP 352: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 353 at IP 353: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) ip: storage_id=36, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 43 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 249 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 249 at IP 249: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 250 at IP 250: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 251 at IP 251: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 252 at IP 252: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 253 at IP 253: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 254 at IP 254: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 262 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 262 at IP 262: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 263 at IP 263: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 264 at IP 264: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 265 at IP 265: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 266 at IP 266: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 267 at IP 267: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 281 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 281 at IP 281: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 282 at IP 282: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 283 at IP 283: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 284 at IP 284: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 285 at IP 285: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 286 at IP 286: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 300 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 300 at IP 300: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 301 at IP 301: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 302 at IP 302: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 303 at IP 303: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 304 at IP 304: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 305 at IP 305: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 314 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 314 at IP 314: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 315 at IP 315: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 316 at IP 316: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 317 at IP 317: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 318 at IP 318: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 319 at IP 319: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 328 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 328 at IP 328: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 329 at IP 329: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 330 at IP 330: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 331 at IP 331: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 332 at IP 332: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 333 at IP 333: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 338 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 339 at IP 339: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 340 at IP 340: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 341 at IP 341: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 342 at IP 342: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 343 at IP 343: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 348 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 349 at IP 349: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 350 at IP 350: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 351 at IP 351: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 352 at IP 352: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 353 at IP 353: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar ip: storage_id=36, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 249 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 249 at IP 249: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 250 at IP 250: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 251 at IP 251: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 252 at IP 252: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 253 at IP 253: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 254 at IP 254: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 262 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 262 at IP 262: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 263 at IP 263: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 264 at IP 264: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 265 at IP 265: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 266 at IP 266: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 267 at IP 267: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 281 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 281 at IP 281: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 282 at IP 282: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 283 at IP 283: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 284 at IP 284: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 285 at IP 285: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 286 at IP 286: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 300 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 300 at IP 300: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 301 at IP 301: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 302 at IP 302: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 303 at IP 303: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 304 at IP 304: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 305 at IP 305: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 314 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 314 at IP 314: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 315 at IP 315: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 316 at IP 316: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 317 at IP 317: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 318 at IP 318: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 319 at IP 319: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 328 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 328 at IP 328: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 329 at IP 329: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 330 at IP 330: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 331 at IP 331: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 332 at IP 332: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 333 at IP 333: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 338 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 339 at IP 339: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 340 at IP 340: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 341 at IP 341: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 342 at IP 342: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 343 at IP 343: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string, b=string, operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 348 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 349 at IP 349: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 350 at IP 350: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 351 at IP 351: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 352 at IP 352: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 353 at IP 353: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar ip: storage_id=36, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int, b=int, operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_32
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 356 (label: while_end_32)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 356 at IP 356: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 357 at IP 357: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 358 at IP 358: ExitScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 359 at IP 359: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 365 at IP 365: ExitScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 366 at IP 366: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: 'test/examples/brainfuck.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\examples\brainfuck.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable symbols has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tape has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loops has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loopSpot has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable ip has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable userInput has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable newByte has type base: Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int GREATER_EQUAL Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op GREATER_EQUAL: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Byte EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable pointer has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable openBrackets has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable closedBrackets has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable ip
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for ip
[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable currentInstruction
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for currentInstruction
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Byte PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from Byte to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Byte MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from Byte to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable tape
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for tape
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 5 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled test/examples/brainfuck.doxa -> out/brainfuck.soxa (376 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 376 instructions, 63 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) symbols: storage_id=23, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tape: storage_id=24, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar tape: storage_id=24, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) loops: storage_id=25, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) loopSpot: storage_id=26, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar loopSpot: storage_id=26, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tp: storage_id=27, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) ip: storage_id=28, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 369 at IP 369: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 370 at IP 370: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 371 at IP 371: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 372 at IP 372: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 373 at IP 373: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 211 at IP 211: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 212 at IP 212: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 213 at IP 213: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) scan: storage_id=29, value=types.types.TokenLiteral{ .string = { 44, 43, 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 214 at IP 214: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 215 at IP 215: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 216 at IP 216: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 217 at IP 217: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) scanLength: storage_id=30, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 218 at IP 218: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 219 at IP 219: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 154 at IP 154: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 155 at IP 155: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 156 at IP 156: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) scan: storage_id=31, value=types.types.TokenLiteral{ .string = { 44, 43, 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 157 at IP 157: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 158 at IP 158: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 159 at IP 159: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 160 at IP 160: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 161 at IP 161: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) openBrackets: storage_id=33, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 1 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 2 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_21
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 204 (label: while_end_21)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 204 at IP 204: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 205 at IP 205: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 206 at IP 206: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 207 at IP 207: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 208 at IP 208: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 209 at IP 209: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 220 at IP 220: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 221 at IP 221: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) closedBrackets: storage_id=34, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.true }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 222 at IP 222: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 223 at IP 223: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=assert_success_29
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 227 (label: assert_success_29)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 227 at IP 227: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable ip
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 44 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 243 at IP 243: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 44 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable currentInstruction
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 244 at IP 244: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 245 at IP 245: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 246 at IP 246: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 247 at IP 247: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 62 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 248 at IP 248: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 255 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 256 at IP 256: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 257 at IP 257: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 258 at IP 258: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 259 at IP 259: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 260 at IP 260: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 60 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 261 at IP 261: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 268 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 269 at IP 269: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 270 at IP 270: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 271 at IP 271: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 272 at IP 272: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 273 at IP 273: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 274 at IP 274: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 287 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 288 at IP 288: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 289 at IP 289: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 290 at IP 290: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 291 at IP 291: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 292 at IP 292: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 293 at IP 293: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 306 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 307 at IP 307: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 308 at IP 308: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 309 at IP 309: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 310 at IP 310: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 311 at IP 311: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 312 at IP 312: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 320 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 321 at IP 321: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 322 at IP 322: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 323 at IP 323: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 324 at IP 324: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 325 at IP 325: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 326 at IP 326: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 334 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 335 at IP 335: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 336 at IP 336: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 337 at IP 337: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 339 at IP 339: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 340 at IP 340: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 344 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 345 at IP 345: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 346 at IP 346: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 347 at IP 347: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 349 at IP 349: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 350 at IP 350: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 354 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 356 at IP 356: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 357 at IP 357: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 358 at IP 358: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .array = codegen.hir.soxa_values.HIRArray{ .elements = { ... }, .element_type = codegen.hir.soxa_types.HIRType.Byte, .capacity = 10, .path = null } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable tape
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 359 at IP 359: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 360 at IP 360: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 361 at IP 361: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 362 at IP 362: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 363 at IP 363: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) ip: storage_id=36, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 364 at IP 364: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 1 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable ip
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 43 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 243 at IP 243: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 43 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable currentInstruction
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 244 at IP 244: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 245 at IP 245: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 246 at IP 246: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 247 at IP 247: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 62 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 248 at IP 248: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 255 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 256 at IP 256: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 257 at IP 257: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 258 at IP 258: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 259 at IP 259: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 260 at IP 260: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 60 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 261 at IP 261: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 268 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 269 at IP 269: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 270 at IP 270: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 271 at IP 271: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 272 at IP 272: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 273 at IP 273: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 274 at IP 274: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 287 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 288 at IP 288: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 289 at IP 289: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 290 at IP 290: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 291 at IP 291: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 292 at IP 292: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 293 at IP 293: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 306 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 307 at IP 307: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 308 at IP 308: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 309 at IP 309: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 310 at IP 310: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 311 at IP 311: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 312 at IP 312: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 320 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 321 at IP 321: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 322 at IP 322: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 323 at IP 323: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 324 at IP 324: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 325 at IP 325: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 326 at IP 326: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 334 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 335 at IP 335: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 336 at IP 336: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 337 at IP 337: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 339 at IP 339: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 340 at IP 340: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 344 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 345 at IP 345: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 346 at IP 346: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 347 at IP 347: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 349 at IP 349: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 350 at IP 350: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 354 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 356 at IP 356: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 357 at IP 357: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 358 at IP 358: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .array = codegen.hir.soxa_values.HIRArray{ .elements = { ... }, .element_type = codegen.hir.soxa_types.HIRType.Byte, .capacity = 10, .path = null } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable tape
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 359 at IP 359: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 360 at IP 360: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 361 at IP 361: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 362 at IP 362: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 363 at IP 363: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar ip: storage_id=36, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 364 at IP 364: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 2 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 2 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable ip
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 243 at IP 243: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 46 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable currentInstruction
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 244 at IP 244: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 245 at IP 245: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 246 at IP 246: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 247 at IP 247: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 62 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 248 at IP 248: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 255 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 256 at IP 256: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 257 at IP 257: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 258 at IP 258: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 259 at IP 259: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 260 at IP 260: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 60 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 261 at IP 261: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 268 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 269 at IP 269: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 270 at IP 270: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 271 at IP 271: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 272 at IP 272: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 273 at IP 273: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 274 at IP 274: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 287 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 288 at IP 288: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 289 at IP 289: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 290 at IP 290: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 291 at IP 291: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 292 at IP 292: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 293 at IP 293: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 306 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 307 at IP 307: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 308 at IP 308: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 309 at IP 309: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 310 at IP 310: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 311 at IP 311: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 312 at IP 312: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 320 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 321 at IP 321: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 322 at IP 322: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 323 at IP 323: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 324 at IP 324: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 325 at IP 325: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 326 at IP 326: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 334 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 335 at IP 335: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 336 at IP 336: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 337 at IP 337: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 339 at IP 339: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 340 at IP 340: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 344 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 345 at IP 345: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 346 at IP 346: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 347 at IP 347: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 349 at IP 349: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 350 at IP 350: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 354 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 356 at IP 356: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 357 at IP 357: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 358 at IP 358: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .array = codegen.hir.soxa_values.HIRArray{ .elements = { ... }, .element_type = codegen.hir.soxa_types.HIRType.Byte, .capacity = 10, .path = null } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable tape
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 359 at IP 359: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 360 at IP 360: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 361 at IP 361: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 362 at IP 362: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 363 at IP 363: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar ip: storage_id=36, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 364 at IP 364: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_32
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 365 (label: while_end_32)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 365 at IP 365: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 366 at IP 366: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 367 at IP 367: ExitScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 368 at IP 368: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 374 at IP 374: ExitScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 375 at IP 375: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: 'test/examples/brainfuck.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\examples\brainfuck.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable symbols has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tape has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loops has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loopSpot has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable ip has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable userInput has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable newByte has type base: Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int GREATER_EQUAL Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op GREATER_EQUAL: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Byte EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable pointer has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable openBrackets has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable closedBrackets has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable ip
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for ip
[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable currentInstruction
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for currentInstruction
[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Byte PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from Byte to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: Byte MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from Byte to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3986:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable tape
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for tape
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 5 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled test/examples/brainfuck.doxa -> out/brainfuck.soxa (376 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 376 instructions, 63 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: ArraySet
[Debug][Hint] interpreter\vm.zig:1900:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1930:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) symbols: storage_id=23, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tape: storage_id=24, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar tape: storage_id=24, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) loops: storage_id=25, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) loopSpot: storage_id=26, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar loopSpot: storage_id=26, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tp: storage_id=27, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) ip: storage_id=28, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 369 at IP 369: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 370 at IP 370: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 371 at IP 371: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 372 at IP 372: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 373 at IP 373: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 211 at IP 211: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 212 at IP 212: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 213 at IP 213: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) scan: storage_id=29, value=types.types.TokenLiteral{ .string = { 44, 43, 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 214 at IP 214: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 215 at IP 215: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 216 at IP 216: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 217 at IP 217: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) scanLength: storage_id=30, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 218 at IP 218: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 219 at IP 219: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 154 at IP 154: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 155 at IP 155: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 156 at IP 156: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) scan: storage_id=31, value=types.types.TokenLiteral{ .string = { 44, 43, 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 157 at IP 157: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 158 at IP 158: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 159 at IP 159: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 160 at IP 160: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 161 at IP 161: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) openBrackets: storage_id=33, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 1 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 2 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_21
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 204 (label: while_end_21)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 204 at IP 204: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 205 at IP 205: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 206 at IP 206: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 207 at IP 207: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 208 at IP 208: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 209 at IP 209: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 220 at IP 220: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 221 at IP 221: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) closedBrackets: storage_id=34, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.true }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 222 at IP 222: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 223 at IP 223: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=assert_success_29
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 227 (label: assert_success_29)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 227 at IP 227: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 0 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable ip
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 44 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 243 at IP 243: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 44 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable currentInstruction
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 244 at IP 244: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 245 at IP 245: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 246 at IP 246: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 247 at IP 247: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 62 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 248 at IP 248: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 255 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 256 at IP 256: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 257 at IP 257: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 258 at IP 258: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 259 at IP 259: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 260 at IP 260: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 60 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 261 at IP 261: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 268 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 269 at IP 269: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 270 at IP 270: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 271 at IP 271: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 272 at IP 272: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 273 at IP 273: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 274 at IP 274: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 287 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 288 at IP 288: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 289 at IP 289: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 290 at IP 290: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 291 at IP 291: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 292 at IP 292: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 293 at IP 293: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 306 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 307 at IP 307: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 308 at IP 308: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 309 at IP 309: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 310 at IP 310: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 311 at IP 311: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 312 at IP 312: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 320 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 321 at IP 321: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 322 at IP 322: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 323 at IP 323: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 324 at IP 324: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 325 at IP 325: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 326 at IP 326: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 334 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 335 at IP 335: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 336 at IP 336: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 337 at IP 337: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 339 at IP 339: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 340 at IP 340: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 344 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 345 at IP 345: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 346 at IP 346: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 347 at IP 347: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 349 at IP 349: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 350 at IP 350: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 354 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 356 at IP 356: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 357 at IP 357: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 358 at IP 358: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .array = codegen.hir.soxa_values.HIRArray{ .elements = { ... }, .element_type = codegen.hir.soxa_types.HIRType.Byte, .capacity = 10, .path = null } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable tape
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 359 at IP 359: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 360 at IP 360: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 361 at IP 361: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 362 at IP 362: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 363 at IP 363: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) ip: storage_id=36, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 364 at IP 364: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 1 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable ip
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 43 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 243 at IP 243: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 43 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable currentInstruction
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 244 at IP 244: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 245 at IP 245: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 246 at IP 246: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 247 at IP 247: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 62 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 248 at IP 248: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 255 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 256 at IP 256: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 257 at IP 257: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 258 at IP 258: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 259 at IP 259: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 260 at IP 260: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 60 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 261 at IP 261: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 268 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 269 at IP 269: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 270 at IP 270: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 271 at IP 271: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 272 at IP 272: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 273 at IP 273: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 274 at IP 274: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 287 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 288 at IP 288: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 289 at IP 289: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 290 at IP 290: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 291 at IP 291: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 292 at IP 292: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 293 at IP 293: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 306 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 307 at IP 307: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 308 at IP 308: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 309 at IP 309: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 310 at IP 310: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 311 at IP 311: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 312 at IP 312: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 320 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 321 at IP 321: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 322 at IP 322: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 323 at IP 323: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 324 at IP 324: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 325 at IP 325: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 326 at IP 326: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 334 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 335 at IP 335: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 336 at IP 336: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 337 at IP 337: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 339 at IP 339: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 340 at IP 340: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 344 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 345 at IP 345: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 346 at IP 346: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 347 at IP 347: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 349 at IP 349: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 350 at IP 350: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 354 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 356 at IP 356: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 357 at IP 357: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 358 at IP 358: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .array = codegen.hir.soxa_values.HIRArray{ .elements = { ... }, .element_type = codegen.hir.soxa_types.HIRType.Byte, .capacity = 10, .path = null } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable tape
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 359 at IP 359: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 360 at IP 360: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 361 at IP 361: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 362 at IP 362: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 363 at IP 363: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar ip: storage_id=36, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 364 at IP 364: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 2 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 2 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable ip
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 243 at IP 243: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 46 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable currentInstruction
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 244 at IP 244: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 245 at IP 245: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 246 at IP 246: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 247 at IP 247: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 62 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 248 at IP 248: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 255 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 256 at IP 256: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 257 at IP 257: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 258 at IP 258: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 259 at IP 259: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 260 at IP 260: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 60 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 261 at IP 261: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 268 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 269 at IP 269: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 270 at IP 270: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 271 at IP 271: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 272 at IP 272: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 273 at IP 273: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 274 at IP 274: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 287 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 288 at IP 288: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 289 at IP 289: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 290 at IP 290: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 291 at IP 291: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 292 at IP 292: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 293 at IP 293: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 306 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 307 at IP 307: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 308 at IP 308: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 309 at IP 309: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 310 at IP 310: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 311 at IP 311: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 312 at IP 312: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 320 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 321 at IP 321: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 322 at IP 322: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 323 at IP 323: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 324 at IP 324: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 325 at IP 325: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 326 at IP 326: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 334 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 335 at IP 335: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 336 at IP 336: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 337 at IP 337: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 339 at IP 339: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 340 at IP 340: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 344 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 345 at IP 345: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 346 at IP 346: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 347 at IP 347: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 349 at IP 349: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 350 at IP 350: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 354 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 356 at IP 356: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 357 at IP 357: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 358 at IP 358: Peek
[Debug][Hint] interpreter\vm.zig:1288:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .array = codegen.hir.soxa_values.HIRArray{ .elements = { ... }, .element_type = codegen.hir.soxa_types.HIRType.Byte, .capacity = 10, .path = null } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1299:0: Peek instruction for variable tape
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 359 at IP 359: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 360 at IP 360: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 361 at IP 361: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 362 at IP 362: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 363 at IP 363: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar ip: storage_id=36, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 364 at IP 364: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1209:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1221:0: DBG Compare result: Lt = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1253:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_32
[Debug][Hint] interpreter\vm.zig:1258:0: DBG JumpCond: jumping to IP 365 (label: while_end_32)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 365 at IP 365: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 366 at IP 366: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 367 at IP 367: ExitScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 368 at IP 368: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 374 at IP 374: ExitScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 375 at IP 375: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable asThenUnion has type base: Union
[Debug][Hint] codegen\hir\soxa_generator.zig:737:0: Found union type with 2 members
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 0: int
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 1: float
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 2: byte
[Debug][Hint] codegen\hir\soxa_generator.zig:756:0: Recorded union members for variable asThenUnion
[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable asThen
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for asThen
[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable asThen2
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for asThen2
[Debug][Hint] codegen\hir\soxa_generator.zig:3981:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable asThen3
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for asThen3
[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable asThen4
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for asThen4
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable cat has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:3981:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (95 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 91 instructions, 13 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) asThenUnion: storage_id=9, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .int = 10 }, should_jump=true, target_label=cast_ok_0
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 11 (label: cast_ok_0)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) asThen: storage_id=10, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1308:0: Peek instruction for variable asThen
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .int = 10 }, should_jump=true, target_label=cast_ok_3
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 26 (label: cast_ok_3)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) asThen2: storage_id=11, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1308:0: Peek instruction for variable asThen2
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .int = 10 }, should_jump=true, target_label=cast_ok_6
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 43 (label: cast_ok_6)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) asThen3: storage_id=12, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1308:0: Peek instruction for variable asThen3
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .int = 10 }, should_jump=true, target_label=cast_ok_9
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 62 (label: cast_ok_9)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 62 at IP 62: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 63 at IP 63: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 64 at IP 64: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 65 at IP 65: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 66 at IP 66: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 67 at IP 67: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) asThen4: storage_id=13, value=types.types.TokenLiteral{ .float = 4e1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 68 at IP 68: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 69 at IP 69: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 70 at IP 70: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1308:0: Peek instruction for variable asThen4
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 71 at IP 71: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 72 at IP 72: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 73 at IP 73: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 74 at IP 74: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) cat: storage_id=14, value=types.types.TokenLiteral{ .string = { 99, 97, 116 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 75 at IP 75: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 76 at IP 76: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 77 at IP 77: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 78 at IP 78: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 99, 97, 116 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 99, 97, 116 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3268:0: DBG compareEqual: comparing strings 'cat' and 'cat', lengths: 3 and 3, result: true
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 79 at IP 79: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=then_14
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 80 (label: then_14)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 80 at IP 80: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 81 at IP 81: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 82 at IP 82: Show
[Debug][Hint] interpreter\vm.zig:1445:0: DBG Show: executing Show instruction
[Debug][Hint] interpreter\vm.zig:1447:0: Show called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 99, 97, 116 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 83 at IP 83: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 84 at IP 84: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 89 at IP 89: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 90 at IP 90: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable asThenUnion has type base: Union
[Debug][Hint] codegen\hir\soxa_generator.zig:737:0: Found union type with 2 members
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 0: int
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 1: float
[Debug][Hint] codegen\hir\soxa_generator.zig:743:0: Union member 2: byte
[Debug][Hint] codegen\hir\soxa_generator.zig:756:0: Recorded union members for variable asThenUnion
[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable asThen
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for asThen
[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable asThen2
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for asThen2
[Debug][Hint] codegen\hir\soxa_generator.zig:3981:0: inferBinaryOpResultType: Int PLUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable asThen3
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for asThen3
[Debug][Hint] codegen\hir\soxa_generator.zig:1778:0: Checking union members for variable asThen4
[Debug][Hint] codegen\hir\soxa_generator.zig:1794:0: No union members found for asThen4
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable cat has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:3981:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (95 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 91 instructions, 13 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) asThenUnion: storage_id=9, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .int = 10 }, should_jump=true, target_label=cast_ok_0
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 11 (label: cast_ok_0)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) asThen: storage_id=10, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 10 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1308:0: Peek instruction for variable asThen
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .int = 10 }, should_jump=true, target_label=cast_ok_3
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 26 (label: cast_ok_3)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) asThen2: storage_id=11, value=types.types.TokenLiteral{ .int = 20 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 20 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1308:0: Peek instruction for variable asThen2
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .int = 10 }, should_jump=true, target_label=cast_ok_6
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 43 (label: cast_ok_6)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) asThen3: storage_id=12, value=types.types.TokenLiteral{ .int = 30 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 30 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1308:0: Peek instruction for variable asThen3
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .int = 10 }, should_jump=true, target_label=cast_ok_9
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 62 (label: cast_ok_9)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 62 at IP 62: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 63 at IP 63: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 64 at IP 64: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 65 at IP 65: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 66 at IP 66: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 67 at IP 67: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) asThen4: storage_id=13, value=types.types.TokenLiteral{ .float = 4e1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 68 at IP 68: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 69 at IP 69: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 70 at IP 70: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 4e1 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1308:0: Peek instruction for variable asThen4
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 71 at IP 71: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 72 at IP 72: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 73 at IP 73: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 74 at IP 74: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) cat: storage_id=14, value=types.types.TokenLiteral{ .string = { 99, 97, 116 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 75 at IP 75: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 76 at IP 76: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 77 at IP 77: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 78 at IP 78: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 99, 97, 116 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 99, 97, 116 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3268:0: DBG compareEqual: comparing strings 'cat' and 'cat', lengths: 3 and 3, result: true
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 79 at IP 79: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=then_14
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 80 (label: then_14)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 80 at IP 80: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 81 at IP 81: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 82 at IP 82: Show
[Debug][Hint] interpreter\vm.zig:1445:0: DBG Show: executing Show instruction
[Debug][Hint] interpreter\vm.zig:1447:0: Show called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 99, 97, 116 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 83 at IP 83: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 84 at IP 84: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 89 at IP 89: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 90 at IP 90: Halt
[CompileTime][Error][E6001] ./test.doxa:3:85: Cannot call length on non-array/string type Int
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1266:0: Converting right operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1266:0: Converting right operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1266:0: Converting right operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1266:0: Converting right operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1266:0: Converting right operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1266:0: Converting right operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1266:0: Converting right operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from String to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1266:0: Converting right operand from String to Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (124 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 124 instructions, 9 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 62 at IP 62: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 63 at IP 63: Convert
[Debug][Hint] interpreter\vm.zig:2735:0: CONVERT String->Int: in=string
[Debug][Hint] interpreter\vm.zig:2773:0: CONVERT RESULT -> string
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 64 at IP 64: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 65 at IP 65: Convert
[Debug][Hint] interpreter\vm.zig:2735:0: CONVERT String->Int: in=string
[Debug][Hint] interpreter\vm.zig:2773:0: CONVERT RESULT -> string
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 66 at IP 66: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 67 at IP 67: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 68 at IP 68: Convert
[Debug][Hint] interpreter\vm.zig:2735:0: CONVERT String->Int: in=string
[Debug][Hint] interpreter\vm.zig:2773:0: CONVERT RESULT -> string
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 69 at IP 69: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 70 at IP 70: Convert
[Debug][Hint] interpreter\vm.zig:2735:0: CONVERT String->Int: in=string
[Debug][Hint] interpreter\vm.zig:2773:0: CONVERT RESULT -> string
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 71 at IP 71: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 72 at IP 72: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 73 at IP 73: Convert
[Debug][Hint] interpreter\vm.zig:2735:0: CONVERT String->Int: in=string
[Debug][Hint] interpreter\vm.zig:2773:0: CONVERT RESULT -> string
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 74 at IP 74: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 75 at IP 75: Convert
[Debug][Hint] interpreter\vm.zig:2735:0: CONVERT String->Int: in=nothing
[Debug][Hint] interpreter\vm.zig:2773:0: CONVERT RESULT -> nothing
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 76 at IP 76: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 77 at IP 77: StringOp
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4007:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (108 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 108 instructions, 9 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 62 at IP 62: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 63 at IP 63: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 64 at IP 64: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 65 at IP 65: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 66 at IP 66: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 67 at IP 67: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 68 at IP 68: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 69 at IP 69: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 70 at IP 70: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 71 at IP 71: StringOp
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (113 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 113 instructions, 9 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 62 at IP 62: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 63 at IP 63: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 64 at IP 64: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 65 at IP 65: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 66 at IP 66: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 67 at IP 67: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 68 at IP 68: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 69 at IP 69: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 70 at IP 70: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 71 at IP 71: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 72 at IP 72: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 73 at IP 73: StringOp
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4027:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (113 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 113 instructions, 9 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 62 at IP 62: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 63 at IP 63: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 64 at IP 64: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 65 at IP 65: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 66 at IP 66: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 67 at IP 67: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 68 at IP 68: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 69 at IP 69: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 70 at IP 70: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 71 at IP 71: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 72 at IP 72: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 73 at IP 73: StringOp
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:4037:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4037:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4037:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4037:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4037:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4037:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4037:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4037:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (113 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 113 instructions, 9 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 62 at IP 62: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 63 at IP 63: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 64 at IP 64: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 65 at IP 65: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 66 at IP 66: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 67 at IP 67: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 68 at IP 68: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 69 at IP 69: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 70 at IP 70: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 71 at IP 71: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 72 at IP 72: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 73 at IP 73: StringOp
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (95 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 95 instructions, 9 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 62 at IP 62: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 63 at IP 63: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 64 at IP 64: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 65 at IP 65: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 66 at IP 66: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 67 at IP 67: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 68 at IP 68: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 69 at IP 69: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 70 at IP 70: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 71 at IP 71: StringOp
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (95 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 95 instructions, 9 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 62 at IP 62: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 63 at IP 63: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 64 at IP 64: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 65 at IP 65: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 66 at IP 66: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 67 at IP 67: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 68 at IP 68: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 69 at IP 69: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 70 at IP 70: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 71 at IP 71: StringOp
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (23 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 23 instructions, 4 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: StringOp
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:4035:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (23 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 23 instructions, 4 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: StringOp
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:3979:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (15 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 15 instructions, 4 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:3979:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (15 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 15 instructions, 4 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:3979:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (15 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 15 instructions, 4 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:4005:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (16 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 16 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Show
[Debug][Hint] interpreter\vm.zig:1445:0: DBG Show: executing Show instruction
[Debug][Hint] interpreter\vm.zig:1447:0: Show called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 104, 101, 32, 118, 97, 108, 117, 101, 32, 111, 102, 32, 49, 48 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable i has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable var_name has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:3928:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:3928:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:3928:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:3928:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:3928:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:3928:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:3928:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] codegen\hir\soxa_generator.zig:3928:0: inferBinaryOpResultType: String PLUS String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=String, right_type=String, result_type=String

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (39 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 39 instructions, 7 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) i: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) var_name: storage_id=3, value=types.types.TokenLiteral{ .string = { 105 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 116, 104, 101, 32, 118, 97, 108, 117, 101, 32, 111, 102, 32, 105, 32, 105, 115, 58, 32, 49, 48, 32, 97, 110, 100, 32, 116, 104, 101, 32, 108, 101, 110, 103, 116, 104, 32, 111, 102, 32, 105, 32, 105, 115, 58, 32, 49, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: Halt
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:59:1: Type mismatch: expected String, got Int
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:72:1: Type mismatch: expected String, got Int
[CompileTime][Error][E5004] ./test/misc/bigfile.doxa:146:10: Function has no return type specified but final expression produces value of type Int
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:226:1: Type mismatch: expected String, got Nothing
[CompileTime][Error][E1003] ./test/misc/bigfile.doxa:227:1: Type mismatch: expected String, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test/examples/brainfuck.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\examples\brainfuck.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable symbols has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tape has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loops has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loopSpot has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable ip has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable userInput has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable newByte has type base: Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: Int GREATER_EQUAL Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op GREATER_EQUAL: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: Byte EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable pointer has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable openBrackets has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable closedBrackets has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: Byte PLUS Int
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Byte, right_type=Int, result_type=Unknown

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: Byte MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:1260:0: Converting left operand from Byte to Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:3924:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 5 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test/examples/brainfuck.doxa -> out/brainfuck.soxa (367 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 367 instructions, 63 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter\vm.zig:1921:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1951:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter\vm.zig:1921:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1951:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter\vm.zig:1921:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1951:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: ArraySet
[Debug][Hint] interpreter\vm.zig:1921:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1951:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: ArraySet
[Debug][Hint] interpreter\vm.zig:1921:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1951:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: ArraySet
[Debug][Hint] interpreter\vm.zig:1921:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1951:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: ArraySet
[Debug][Hint] interpreter\vm.zig:1921:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1951:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: ArraySet
[Debug][Hint] interpreter\vm.zig:1921:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:1951:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) symbols: storage_id=23, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tape: storage_id=24, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar tape: storage_id=24, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) loops: storage_id=25, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) loopSpot: storage_id=26, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar loopSpot: storage_id=26, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tp: storage_id=27, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) ip: storage_id=28, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 360 at IP 360: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 361 at IP 361: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 362 at IP 362: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 363 at IP 363: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 364 at IP 364: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 211 at IP 211: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 212 at IP 212: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 213 at IP 213: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) scan: storage_id=29, value=types.types.TokenLiteral{ .string = { 44, 43, 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 214 at IP 214: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 215 at IP 215: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 216 at IP 216: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 217 at IP 217: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) scanLength: storage_id=30, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 218 at IP 218: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 219 at IP 219: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 154 at IP 154: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 155 at IP 155: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 156 at IP 156: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) scan: storage_id=31, value=types.types.TokenLiteral{ .string = { 44, 43, 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 157 at IP 157: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 158 at IP 158: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 159 at IP 159: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 160 at IP 160: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 161 at IP 161: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) openBrackets: storage_id=33, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3280:0: DBG compareEqual: comparing strings ',' and '[', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3280:0: DBG compareEqual: comparing strings ',' and ']', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 1 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3280:0: DBG compareEqual: comparing strings '+' and '[', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3280:0: DBG compareEqual: comparing strings '+' and ']', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 2 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 168 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3280:0: DBG compareEqual: comparing strings '.' and '[', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 181 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 181 at IP 181: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3280:0: DBG compareEqual: comparing strings '.' and ']', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 196 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 196 at IP 196: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_21
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 204 (label: while_end_21)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 204 at IP 204: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 205 at IP 205: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 206 at IP 206: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 207 at IP 207: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 208 at IP 208: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 209 at IP 209: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 220 at IP 220: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 221 at IP 221: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) closedBrackets: storage_id=34, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.true }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 222 at IP 222: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 223 at IP 223: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=assert_success_29
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 227 (label: assert_success_29)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 227 at IP 227: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 233 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 44 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 62 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3280:0: DBG compareEqual: comparing strings ',' and '>', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 249 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 249 at IP 249: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 250 at IP 250: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 251 at IP 251: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 252 at IP 252: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 253 at IP 253: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 254 at IP 254: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 60 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3280:0: DBG compareEqual: comparing strings ',' and '<', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 262 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 262 at IP 262: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 263 at IP 263: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 264 at IP 264: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 265 at IP 265: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 266 at IP 266: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 267 at IP 267: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3280:0: DBG compareEqual: comparing strings ',' and '+', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 281 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 281 at IP 281: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 282 at IP 282: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 283 at IP 283: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 284 at IP 284: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 285 at IP 285: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 286 at IP 286: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3280:0: DBG compareEqual: comparing strings ',' and '-', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 300 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 300 at IP 300: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 301 at IP 301: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 302 at IP 302: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 303 at IP 303: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 304 at IP 304: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 305 at IP 305: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3280:0: DBG compareEqual: comparing strings ',' and '.', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 314 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 314 at IP 314: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 315 at IP 315: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 316 at IP 316: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 317 at IP 317: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 318 at IP 318: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 319 at IP 319: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3280:0: DBG compareEqual: comparing strings ',' and ',', lengths: 1 and 1, result: true
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=then_50
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 321 (label: then_50)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 321 at IP 321: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 322 at IP 322: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 323 at IP 323: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 324 at IP 324: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 62 at IP 62: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 63 at IP 63: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 64 at IP 64: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 65 at IP 65: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 66 at IP 66: Call
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test/examples/brainfuck.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\examples\brainfuck.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable symbols has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tape has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loops has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loopSpot has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable ip has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable userInput has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable newByte has type base: Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: Int GREATER_EQUAL Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op GREATER_EQUAL: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: Byte EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable pointer has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable openBrackets has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable closedBrackets has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4135:0: inferBinaryOpResultType: Byte PLUS Int
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Byte, right_type=Int, result_type=Unknown

[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[CompileTime][Error][E6013] ./test.doxa:9:6: Cannot parse non-string type Byte as number
[CompileTime][Error][E6013] ./test.doxa:10:8: Cannot parse non-string type Byte as number
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[CompileTime][Error][E6013] ./test.doxa:9:6: Cannot parse non-string type Byte as number
[CompileTime][Error][E6013] ./test.doxa:10:8: Cannot parse non-string type Byte as number
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[CompileTime][Error][E6013] ./test.doxa:9:6: Cannot parse non-string type Byte as number
[CompileTime][Error][E6013] ./test.doxa:10:8: Cannot parse non-string type Byte as number
[CompileTime][Error][E6013] ./test.doxa:11:7: Cannot parse non-string type Float as number
[CompileTime][Error][E6013] ./test.doxa:12:6: Cannot parse non-string type Float as number
[CompileTime][Error][E6013] ./test.doxa:13:7: Cannot parse non-string type Int as number
[CompileTime][Error][E6013] ./test.doxa:14:8: Cannot parse non-string type Int as number
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable int_value has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable float_value has type base: Float
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable byte_value has type base: Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:1894:0: Checking union members for variable int_value
[Debug][Hint] codegen\hir\soxa_generator.zig:1910:0: No union members found for int_value
[Debug][Hint] codegen\hir\soxa_generator.zig:1894:0: Checking union members for variable float_value
[Debug][Hint] codegen\hir\soxa_generator.zig:1910:0: No union members found for float_value
[Debug][Hint] codegen\hir\soxa_generator.zig:1894:0: Checking union members for variable byte_value
[Debug][Hint] codegen\hir\soxa_generator.zig:1910:0: No union members found for byte_value
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (46 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 46 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) int_value: storage_id=3, value=types.types.TokenLiteral{ .int = 100 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) float_value: storage_id=4, value=types.types.TokenLiteral{ .float = 1e2 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) byte_value: storage_id=5, value=types.types.TokenLiteral{ .byte = 160 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 100 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1308:0: Peek instruction for variable int_value
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .float = 1e2 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1308:0: Peek instruction for variable float_value
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .byte = 160 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1308:0: Peek instruction for variable byte_value
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .int = 160 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: StringOp
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:14:9: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:15:10: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:15:15: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:20:16: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:24:20: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:28:18: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:51:4: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:90:23: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:90:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:91:24: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:91:29: Arithmetic requires numeric operands
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:91:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:96:30: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:96:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:99:34: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:99:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:102:33: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:102:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:125:19: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:125:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:158:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:159:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:162:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:164:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:166:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:181:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:207:25: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:208:26: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:208:31: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:213:32: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:216:36: Cannot use + operator between Int and Float. Both operands must be the same type.
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test/examples/brainfuck.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\examples\brainfuck.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable symbols has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tape has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loops has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loopSpot has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable ip has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable userInput has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable newByte has type base: Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Int GREATER_EQUAL Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op GREATER_EQUAL: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Byte EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable pointer has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable openBrackets has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable closedBrackets has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Byte PLUS Int
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Byte, right_type=Int, result_type=Unknown

[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test/examples/brainfuck.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\examples\brainfuck.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable symbols has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tape has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loops has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loopSpot has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable ip has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable userInput has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable newByte has type base: Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Int GREATER_EQUAL Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op GREATER_EQUAL: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Byte EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable pointer has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable openBrackets has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable closedBrackets has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4155:0: inferBinaryOpResultType: Byte PLUS Int
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Byte, right_type=Int, result_type=Unknown

[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:61:53: Cannot use + operator between Byte and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test/examples/brainfuck.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\examples\brainfuck.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable symbols has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tape has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loops has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loopSpot has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable ip has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable userInput has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable newByte has type base: Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Int GREATER_EQUAL Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op GREATER_EQUAL: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Byte EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable pointer has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable openBrackets has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable closedBrackets has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1894:0: Checking union members for variable tape
[Debug][Hint] codegen\hir\soxa_generator.zig:1910:0: No union members found for tape
[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Byte PLUS Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Byte, right_type=Byte, result_type=Byte

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Byte MINUS Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Byte, right_type=Byte, result_type=Byte

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 5 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test/examples/brainfuck.doxa -> out/brainfuck.soxa (371 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 371 instructions, 63 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter\vm.zig:1986:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:2016:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: ArraySet
[Debug][Hint] interpreter\vm.zig:1986:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:2016:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: ArraySet
[Debug][Hint] interpreter\vm.zig:1986:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:2016:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 15 at IP 15: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 16 at IP 16: ArraySet
[Debug][Hint] interpreter\vm.zig:1986:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:2016:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 17 at IP 17: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 18 at IP 18: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 19 at IP 19: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 20 at IP 20: ArraySet
[Debug][Hint] interpreter\vm.zig:1986:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:2016:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 21 at IP 21: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 22 at IP 22: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 23 at IP 23: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 24 at IP 24: ArraySet
[Debug][Hint] interpreter\vm.zig:1986:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:2016:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 25 at IP 25: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 26 at IP 26: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 27 at IP 27: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 28 at IP 28: ArraySet
[Debug][Hint] interpreter\vm.zig:1986:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:2016:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 29 at IP 29: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 30 at IP 30: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 31 at IP 31: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 32 at IP 32: ArraySet
[Debug][Hint] interpreter\vm.zig:1986:0: ArraySet: array element_type=String, trying to assign value type=string
[Debug][Hint] interpreter\vm.zig:2016:0: ArraySet: keeping value as-is for type String
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 33 at IP 33: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 34 at IP 34: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) symbols: storage_id=23, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } }, types.types.TokenLiteral{ .string = { ... } } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 35 at IP 35: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 36 at IP 36: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 37 at IP 37: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 38 at IP 38: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tape: storage_id=24, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 39 at IP 39: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 40 at IP 40: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar tape: storage_id=24, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 41 at IP 41: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 42 at IP 42: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 43 at IP 43: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 44 at IP 44: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) loops: storage_id=25, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 45 at IP 45: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 46 at IP 46: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 47 at IP 47: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 48 at IP 48: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) loopSpot: storage_id=26, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 49 at IP 49: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 50 at IP 50: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar loopSpot: storage_id=26, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void }, types.types.TokenLiteral{ .nothing = void } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 51 at IP 51: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 52 at IP 52: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 53 at IP 53: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 54 at IP 54: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tp: storage_id=27, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 55 at IP 55: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 56 at IP 56: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 57 at IP 57: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 58 at IP 58: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) ip: storage_id=28, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 59 at IP 59: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 60 at IP 60: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 364 at IP 364: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 365 at IP 365: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 366 at IP 366: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 367 at IP 367: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 368 at IP 368: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 212 at IP 212: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 213 at IP 213: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 214 at IP 214: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) scan: storage_id=29, value=types.types.TokenLiteral{ .string = { 44, 43, 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 215 at IP 215: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 216 at IP 216: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 217 at IP 217: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 218 at IP 218: StoreConst
[Debug][Hint] interpreter\vm.zig:1061:0: DBG WRITE StoreConst (create) scanLength: storage_id=30, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 219 at IP 219: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 220 at IP 220: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 155 at IP 155: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 156 at IP 156: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 157 at IP 157: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) scan: storage_id=31, value=types.types.TokenLiteral{ .string = { 44, 43, 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 158 at IP 158: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 159 at IP 159: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 160 at IP 160: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 161 at IP 161: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 162 at IP 162: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) openBrackets: storage_id=33, value=types.types.TokenLiteral{ .int = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 169 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings ',' and '[', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 175 at IP 175: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 182 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings ',' and ']', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 190 at IP 190: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 197 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 204 at IP 204: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 1 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 169 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '+' and '[', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 175 at IP 175: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 182 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '+' and ']', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 190 at IP 190: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 197 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 204 at IP 204: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 2 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_20
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 169 (label: while_body_20)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 169 at IP 169: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 170 at IP 170: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 171 at IP 171: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 172 at IP 172: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 173 at IP 173: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 174 at IP 174: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '.' and '[', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 175 at IP 175: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_22
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 182 (label: else_22)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 182 at IP 182: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 183 at IP 183: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 184 at IP 184: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 185 at IP 185: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 186 at IP 186: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 187 at IP 187: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 188 at IP 188: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 189 at IP 189: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '.' and ']', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 190 at IP 190: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_25
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 197 (label: else_25)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 197 at IP 197: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 198 at IP 198: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 199 at IP 199: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 200 at IP 200: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 201 at IP 201: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 202 at IP 202: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 203 at IP 203: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar pointer: storage_id=32, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 204 at IP 204: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 163 at IP 163: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 164 at IP 164: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 165 at IP 165: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 166 at IP 166: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 167 at IP 167: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 168 at IP 168: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_21
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 205 (label: while_end_21)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 205 at IP 205: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 206 at IP 206: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 207 at IP 207: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 208 at IP 208: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 209 at IP 209: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 210 at IP 210: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 221 at IP 221: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 222 at IP 222: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) closedBrackets: storage_id=34, value=types.types.TokenLiteral{ .tetra = types.types.Tetra.true }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 223 at IP 223: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 224 at IP 224: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=assert_success_29
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 228 (label: assert_success_29)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 228 at IP 228: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 229 at IP 229: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 230 at IP 230: Peek
[Debug][Hint] interpreter\vm.zig:1297:0: Peek called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .array = codegen.hir.soxa_values.HIRArray{ .elements = { ... }, .element_type = codegen.hir.soxa_types.HIRType.Byte, .capacity = 10, .path = null } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:1308:0: Peek instruction for variable tape
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 231 at IP 231: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 0 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 237 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 44 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 243 at IP 243: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 244 at IP 244: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 245 at IP 245: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 62 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings ',' and '>', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 246 at IP 246: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 253 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 253 at IP 253: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 254 at IP 254: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 256 at IP 256: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 257 at IP 257: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 258 at IP 258: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 60 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings ',' and '<', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 259 at IP 259: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 266 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 266 at IP 266: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 267 at IP 267: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 269 at IP 269: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 270 at IP 270: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 271 at IP 271: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings ',' and '+', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 272 at IP 272: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 285 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 285 at IP 285: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 286 at IP 286: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 288 at IP 288: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 289 at IP 289: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 290 at IP 290: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings ',' and '-', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 291 at IP 291: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 304 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 304 at IP 304: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 305 at IP 305: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 307 at IP 307: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 308 at IP 308: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 309 at IP 309: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings ',' and '.', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 310 at IP 310: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 318 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 318 at IP 318: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 319 at IP 319: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 321 at IP 321: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 322 at IP 322: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 323 at IP 323: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings ',' and ',', lengths: 1 and 1, result: true
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 324 at IP 324: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=then_50
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 325 (label: then_50)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 325 at IP 325: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 326 at IP 326: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 327 at IP 327: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 328 at IP 328: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 62 at IP 62: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 63 at IP 63: EnterScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 64 at IP 64: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 65 at IP 65: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 66 at IP 66: Call
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 67 at IP 67: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 68 at IP 68: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) userInput: storage_id=36, value=types.types.TokenLiteral{ .string = { 103 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 69 at IP 69: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 70 at IP 70: StringOp
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 71 at IP 71: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 72 at IP 72: ArrayGet
[Debug][Hint] interpreter\vm.zig:1915:0: ArrayGet: array element_type=Byte, retrieved element type=byte
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 73 at IP 73: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 74 at IP 74: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) newByte: storage_id=37, value=types.types.TokenLiteral{ .byte = 103 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 75 at IP 75: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 76 at IP 76: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 329 at IP 329: ArraySet
[Debug][Hint] interpreter\vm.zig:1986:0: ArraySet: array element_type=Byte, trying to assign value type=byte
[Debug][Hint] interpreter\vm.zig:1996:0: ArraySet: keeping byte value 103
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 330 at IP 330: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) tape: storage_id=38, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 103 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 331 at IP 331: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 335 at IP 335: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 336 at IP 336: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 337 at IP 337: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings ',' and '[', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 342 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 342 at IP 342: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 343 at IP 343: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 345 at IP 345: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 346 at IP 346: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 347 at IP 347: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings ',' and ']', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 352 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 352 at IP 352: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 353 at IP 353: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 356 at IP 356: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 357 at IP 357: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 358 at IP 358: StoreVar
[Debug][Hint] interpreter\vm.zig:994:0: DBG WRITE StoreVar (create) ip: storage_id=39, value=types.types.TokenLiteral{ .int = 1 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 359 at IP 359: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 1 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 237 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 43 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 243 at IP 243: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 244 at IP 244: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 245 at IP 245: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 62 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '+' and '>', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 246 at IP 246: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 253 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 253 at IP 253: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 254 at IP 254: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 256 at IP 256: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 257 at IP 257: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 258 at IP 258: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 60 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '+' and '<', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 259 at IP 259: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 266 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 266 at IP 266: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 267 at IP 267: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 269 at IP 269: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 270 at IP 270: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 271 at IP 271: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '+' and '+', lengths: 1 and 1, result: true
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 272 at IP 272: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=then_41
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 273 (label: then_41)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 273 at IP 273: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 274 at IP 274: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 275 at IP 275: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 276 at IP 276: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 277 at IP 277: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 278 at IP 278: ArrayGet
[Debug][Hint] interpreter\vm.zig:1915:0: ArrayGet: array element_type=Byte, retrieved element type=byte
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 279 at IP 279: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 280 at IP 280: Swap
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 281 at IP 281: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 282 at IP 282: ArraySet
[Debug][Hint] interpreter\vm.zig:1986:0: ArraySet: array element_type=Byte, trying to assign value type=byte
[Debug][Hint] interpreter\vm.zig:1996:0: ArraySet: keeping byte value 104
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 283 at IP 283: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar tape: storage_id=38, value=types.types.TokenLiteral{ .array = { types.types.TokenLiteral{ .byte = 104 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 }, types.types.TokenLiteral{ .byte = 0 } } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 284 at IP 284: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 288 at IP 288: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 289 at IP 289: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 290 at IP 290: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '+' and '-', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 291 at IP 291: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 304 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 304 at IP 304: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 305 at IP 305: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 307 at IP 307: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 308 at IP 308: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 309 at IP 309: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '+' and '.', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 310 at IP 310: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_45
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 318 (label: else_45)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 318 at IP 318: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 319 at IP 319: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 321 at IP 321: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 322 at IP 322: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 323 at IP 323: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '+' and ',', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 324 at IP 324: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 332 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 332 at IP 332: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 333 at IP 333: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 335 at IP 335: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 336 at IP 336: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 337 at IP 337: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '+' and '[', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 342 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 342 at IP 342: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 343 at IP 343: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 345 at IP 345: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 346 at IP 346: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 347 at IP 347: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '+' and ']', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 352 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 352 at IP 352: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 353 at IP 353: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 356 at IP 356: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 357 at IP 357: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 358 at IP 358: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar ip: storage_id=39, value=types.types.TokenLiteral{ .int = 2 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 359 at IP 359: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 2 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=while_body_31
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 237 (label: while_body_31)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 237 at IP 237: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 238 at IP 238: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 239 at IP 239: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 240 at IP 240: ArrayGet
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 241 at IP 241: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 242 at IP 242: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar currentInstruction: storage_id=35, value=types.types.TokenLiteral{ .string = { 46 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 243 at IP 243: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 244 at IP 244: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 245 at IP 245: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 62 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '.' and '>', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 246 at IP 246: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_33
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 253 (label: else_33)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 253 at IP 253: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 254 at IP 254: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 255 at IP 255: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 256 at IP 256: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 257 at IP 257: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 258 at IP 258: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 60 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '.' and '<', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 259 at IP 259: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_36
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 266 (label: else_36)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 266 at IP 266: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 267 at IP 267: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 268 at IP 268: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 269 at IP 269: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 270 at IP 270: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 271 at IP 271: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 43 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '.' and '+', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 272 at IP 272: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_39
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 285 (label: else_39)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 285 at IP 285: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 286 at IP 286: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 287 at IP 287: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 288 at IP 288: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 289 at IP 289: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 290 at IP 290: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 45 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '.' and '-', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 291 at IP 291: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_42
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 304 (label: else_42)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 304 at IP 304: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 305 at IP 305: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 306 at IP 306: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 307 at IP 307: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 308 at IP 308: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 309 at IP 309: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '.' and '.', lengths: 1 and 1, result: true
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = true
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 310 at IP 310: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 1 }, should_jump=true, target_label=then_47
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 311 (label: then_47)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 311 at IP 311: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 312 at IP 312: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 313 at IP 313: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 314 at IP 314: ArrayGet
[Debug][Hint] interpreter\vm.zig:1915:0: ArrayGet: array element_type=Byte, retrieved element type=byte
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 315 at IP 315: Print
[Debug][Hint] interpreter\vm.zig:1445:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter\vm.zig:1447:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .byte = 104 }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 316 at IP 316: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 317 at IP 317: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 320 at IP 320: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 321 at IP 321: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 322 at IP 322: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 323 at IP 323: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 44 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '.' and ',', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 324 at IP 324: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_48
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 332 (label: else_48)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 332 at IP 332: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 333 at IP 333: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 334 at IP 334: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 335 at IP 335: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 336 at IP 336: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 337 at IP 337: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 91 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '.' and '[', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 338 at IP 338: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_51
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 342 (label: else_51)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 342 at IP 342: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 343 at IP 343: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 344 at IP 344: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 345 at IP 345: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 346 at IP 346: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 347 at IP 347: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Eq: a=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 46 } }), b=string (value: codegen.hir.soxa_values.HIRValue{ .string = { 93 } }), operand_type=String
[Debug][Hint] interpreter\vm.zig:3345:0: DBG compareEqual: comparing strings '.' and ']', lengths: 1 and 1, result: false
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Eq = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 348 at IP 348: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=else_54
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 352 (label: else_54)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 352 at IP 352: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 353 at IP 353: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 354 at IP 354: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 355 at IP 355: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 356 at IP 356: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 357 at IP 357: Arith
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 358 at IP 358: StoreVar
[Debug][Hint] interpreter\vm.zig:981:0: DBG WRITE StoreVar ip: storage_id=39, value=types.types.TokenLiteral{ .int = 3 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 359 at IP 359: Jump
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 232 at IP 232: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 233 at IP 233: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 234 at IP 234: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 235 at IP 235: Compare
[Debug][Hint] interpreter\vm.zig:1199:0: DBG Compare Lt: a=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), b=int (value: codegen.hir.soxa_values.HIRValue{ .int = 3 }), operand_type=Int
[Debug][Hint] interpreter\vm.zig:1211:0: DBG Compare result: Lt = false
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 236 at IP 236: JumpCond
[Debug][Hint] interpreter\vm.zig:1262:0: DBG JumpCond: condition=codegen.hir.soxa_values.HIRValue{ .tetra = 0 }, should_jump=false, target_label=while_end_32
[Debug][Hint] interpreter\vm.zig:1267:0: DBG JumpCond: jumping to IP 360 (label: while_end_32)
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 360 at IP 360: Label
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 361 at IP 361: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 362 at IP 362: ExitScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 363 at IP 363: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 369 at IP 369: ExitScope
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 370 at IP 370: Return
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 61 at IP 61: Halt
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:65:1: Type mismatch: expected Byte, got Nothing
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test/examples/brainfuck.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test\examples\brainfuck.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable symbols has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tape has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loops has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable loopSpot has type base: Array
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable tp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable ip has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable userInput has type base: String
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable newByte has type base: Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Int GREATER_EQUAL Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op GREATER_EQUAL: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Byte EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Byte, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Int MINUS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable pointer has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable openBrackets has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Int EQUALITY Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:725:0: Variable closedBrackets has type base: Tetra
[Debug][Hint] codegen\hir\soxa_generator.zig:1894:0: Checking union members for variable tape
[Debug][Hint] codegen\hir\soxa_generator.zig:1910:0: No union members found for tape
[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Int LESS Int
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op LESS: left_type=Int, right_type=Int, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Byte PLUS Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op PLUS: left_type=Byte, right_type=Byte, result_type=Byte

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: Byte MINUS Byte
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op MINUS: left_type=Byte, right_type=Byte, result_type=Byte

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] codegen\hir\soxa_generator.zig:4159:0: inferBinaryOpResultType: String EQUALITY String
[Debug][Hint] codegen\hir\soxa_generator.zig:1231:0: Binary op EQUALITY: left_type=String, right_type=String, result_type=Int

[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 5 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test/examples/brainfuck.doxa -> out/brainfuck.soxa (371 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 371 instructions, 63 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: ArrayNew
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: ArraySet
[Debug][Hint] interpreter\vm.zig:1986:0: ArraySet: array element_type=String, trying to assign value type=string
[CompileTime][Error][E1009] ./test/misc/bigfile.doxa:91:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/bigfile.doxa:96:1: Undefined variable
[CompileTime][Error][E1009] ./test/misc/bigfile.doxa:98:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/bigfile.doxa:103:1: Undefined variable
[CompileTime][Error][E1009] ./test/misc/bigfile.doxa:292:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/bigfile.doxa:293:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:14:9: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:15:10: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:15:15: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:20:16: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:24:20: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:28:18: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:51:4: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:90:23: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:90:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:91:24: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:91:29: Arithmetic requires numeric operands
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:91:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:96:30: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:96:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:99:34: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:99:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:102:33: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:102:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:125:19: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:125:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:158:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:159:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:162:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:164:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:166:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:181:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:207:25: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:208:26: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:208:31: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:213:32: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:216:36: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/bigfile.doxa:91:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/bigfile.doxa:96:1: Undefined variable
[CompileTime][Error][E1009] ./test/misc/bigfile.doxa:98:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/bigfile.doxa:103:1: Undefined variable
[CompileTime][Error][E1009] ./test/misc/bigfile.doxa:292:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/bigfile.doxa:293:1: Undefined variable
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:14:9: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:15:10: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:15:15: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:20:16: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:24:20: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:28:18: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:51:4: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:90:23: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:90:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:91:24: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:91:29: Arithmetic requires numeric operands
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:91:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:96:30: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:96:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:99:34: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:99:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:102:33: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:102:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:125:19: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:125:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:158:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:159:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:162:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:164:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:166:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:181:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:207:25: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:208:26: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:208:31: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:213:32: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:216:36: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:14:9: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:15:10: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:15:15: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:20:16: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:24:20: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:28:18: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:51:4: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:90:23: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:90:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:91:24: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:91:29: Arithmetic requires numeric operands
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:91:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:96:30: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:96:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:99:34: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:99:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:102:33: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:102:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:125:19: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:125:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:158:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:159:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:162:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:164:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:166:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:181:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:207:25: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:208:26: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:208:31: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:213:32: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:216:36: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:219:35: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:242:21: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:14:9: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:15:10: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:15:15: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:20:16: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:24:20: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:28:18: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:85:23: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:85:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:86:24: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:86:29: Arithmetic requires numeric operands
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:86:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:91:30: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:91:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:94:34: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:94:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:97:33: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:97:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:148:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:149:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:152:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:154:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:156:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:171:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:172:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:173:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:197:25: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:198:26: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:198:31: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:203:32: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:206:36: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:209:35: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:283:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:284:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:285:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:14:9: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:15:10: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:15:15: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:20:16: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:24:20: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:28:18: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:85:23: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:85:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:86:24: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:86:29: Arithmetic requires numeric operands
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:86:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:91:30: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:91:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:94:34: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:94:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:97:33: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:97:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:148:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:149:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:152:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:154:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:156:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:171:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:172:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:173:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:197:25: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:198:26: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:198:31: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:203:32: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:206:36: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:209:35: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:283:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:284:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:285:1: Undefined variable
[CompileTime][Error][E1003] ./test.doxa:1:14: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1009] ./test.doxa:1:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test.doxa:2:1: Undefined variable
[CompileTime][Error][E1003] ./test/examples/brainfuck.doxa:63:1: Type mismatch: expected Byte, got Nothing
[Runtime][Error][E1001] Cannot convert array to integer for arithmetic
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:14:9: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:15:10: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:15:15: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:20:16: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:24:20: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:28:18: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:85:23: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:85:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:86:24: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:86:29: Arithmetic requires numeric operands
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:86:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:91:30: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:91:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:94:34: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:94:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:97:33: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:97:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:148:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:149:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:152:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:154:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:156:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:171:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:172:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:173:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:197:25: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:198:26: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:198:31: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:203:32: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:206:36: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:209:35: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:283:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:284:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:285:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:14:9: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:15:10: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:15:15: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:20:16: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:24:20: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:28:18: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:85:23: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:85:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:86:24: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:86:29: Arithmetic requires numeric operands
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:86:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:91:30: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:91:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:94:34: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:94:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:97:33: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:97:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:148:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:149:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:152:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:154:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:156:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:171:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:172:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:173:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:197:25: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:198:26: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:198:31: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:203:32: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:206:36: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:209:35: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:283:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:284:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:285:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:14:9: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:15:10: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:15:15: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:20:16: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:24:20: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:28:18: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:85:23: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:85:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:86:24: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:86:29: Arithmetic requires numeric operands
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:86:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:91:30: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:91:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:94:34: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:94:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:97:33: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1009] ./test/misc/expressions.doxa:97:5: Nothing type variables must be declared as 'const'
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:148:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:149:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:152:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:154:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:156:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:171:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:172:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:173:1: Undefined variable
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:197:25: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:198:26: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test/misc/expressions.doxa:198:31: Arithmetic requires numeric operands
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:203:32: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:206:36: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1003] ./test/misc/expressions.doxa:209:35: Cannot use + operator between Int and Float. Both operands must be the same type.
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:283:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:284:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:285:1: Undefined variable
[CompileTime][Error][E1003] ./test.doxa:3:9: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1003] ./test.doxa:4:10: Cannot use + operator between Float and Int. Both operands must be the same type.
[CompileTime][Error][E1007] ./test.doxa:4:15: Arithmetic requires numeric operands
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:171:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:172:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:173:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:283:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:284:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:285:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:171:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:172:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:173:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:283:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:284:1: Undefined variable
[CompileTime][Error][E1001] ./test/misc/expressions.doxa:285:1: Undefined variable
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (1 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 1 instructions, 0 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (3 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 2 instructions, 0 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Pop
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (3 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 3 instructions, 0 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Print
[Debug][Hint] interpreter\vm.zig:1422:0: DBG Print: executing Print instruction
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:540:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:565:0: HIR: processing current module globals
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (3 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 3 instructions, 0 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Print
[Debug][Hint] interpreter\vm.zig:1422:0: DBG Print: executing Print instruction
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:538:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:563:0: HIR: processing current module globals
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (4 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 4 instructions, 0 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:538:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:563:0: HIR: processing current module globals
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (4 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 4 instructions, 1 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Print
[Debug][Hint] interpreter\vm.zig:1422:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter\vm.zig:1424:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:538:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:563:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:723:0: Variable hp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:723:0: Variable word has type base: String
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:538:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:563:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:723:0: Variable hp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:723:0: Variable word has type base: String
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:538:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:563:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:723:0: Variable hp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:723:0: Variable word has type base: String
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (15 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 15 instructions, 4 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreConst
[Debug][Hint] interpreter\vm.zig:1038:0: DBG WRITE StoreConst (create) hp: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreConst
[Debug][Hint] interpreter\vm.zig:1038:0: DBG WRITE StoreConst (create) word: storage_id=3, value=types.types.TokenLiteral{ .string = { 111, 114, 97, 110, 103, 101 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Print
[Debug][Hint] interpreter\vm.zig:1422:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter\vm.zig:1424:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: Print
[Debug][Hint] interpreter\vm.zig:1422:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter\vm.zig:1424:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 84, 104, 101, 32, 112, 108, 97, 121, 101, 114, 32, 104, 97, 115, 32 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 14 at IP 14: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:538:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:563:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:723:0: Variable hp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:723:0: Variable word has type base: String
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (15 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 14 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreConst
[Debug][Hint] interpreter\vm.zig:1038:0: DBG WRITE StoreConst (create) hp: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreConst
[Debug][Hint] interpreter\vm.zig:1038:0: DBG WRITE StoreConst (create) word: storage_id=3, value=types.types.TokenLiteral{ .string = { 111, 114, 97, 110, 103, 101 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Print
[Debug][Hint] interpreter\vm.zig:1422:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter\vm.zig:1424:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:538:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:563:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:723:0: Variable hp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:723:0: Variable word has type base: String
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (15 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 14 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreConst
[Debug][Hint] interpreter\vm.zig:1038:0: DBG WRITE StoreConst (create) hp: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreConst
[Debug][Hint] interpreter\vm.zig:1038:0: DBG WRITE StoreConst (create) word: storage_id=3, value=types.types.TokenLiteral{ .string = { 111, 114, 97, 110, 103, 101 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Print
[Debug][Hint] interpreter\vm.zig:1422:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter\vm.zig:1424:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Halt
[Debug][Hint] main.zig:395:0: Debug: Processing script: './test.doxa'

[Debug][Hint] main.zig:415:0: Debug: Absolute path: 'C:\dev\zig\doxa\test.doxa'

[Debug][Hint] main.zig:420:0: reporter debug method working

[Debug][Hint] codegen\hir\soxa_generator.zig:538:0: HIR: processing imported module globals: 0
[Debug][Hint] codegen\hir\soxa_generator.zig:563:0: HIR: processing current module globals
[Debug][Hint] codegen\hir\soxa_generator.zig:723:0: Variable hp has type base: Int
[Debug][Hint] codegen\hir\soxa_generator.zig:723:0: Variable word has type base: String
[Debug][Hint] main.zig:177:0: >> Peephole optimizations applied: 0 HIR instruction optimizations

[Debug][Hint] main.zig:199:0: >> Compiled ./test.doxa -> out/test.soxa (15 HIR instructions)

[Debug][Hint] main.zig:493:0: >> Executing with HIR VM

[Debug][Hint] main.zig:210:0: >> Loaded SOXA: 14 instructions, 3 constants

[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 0 at IP 0: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 1 at IP 1: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 2 at IP 2: StoreConst
[Debug][Hint] interpreter\vm.zig:1038:0: DBG WRITE StoreConst (create) hp: storage_id=2, value=types.types.TokenLiteral{ .int = 10 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 3 at IP 3: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 4 at IP 4: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 5 at IP 5: Dup
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 6 at IP 6: StoreConst
[Debug][Hint] interpreter\vm.zig:1038:0: DBG WRITE StoreConst (create) word: storage_id=3, value=types.types.TokenLiteral{ .string = { 111, 114, 97, 110, 103, 101 } }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 7 at IP 7: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 8 at IP 8: Const
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 9 at IP 9: Print
[Debug][Hint] interpreter\vm.zig:1422:0: DBG Print: executing Print instruction
[Debug][Hint] interpreter\vm.zig:1424:0: Print called with value: interpreter.vm.HIRFrame{ .value = codegen.hir.soxa_values.HIRValue{ .string = { 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 10 } }, .field_name = null, .scope_refs = 0 }
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 10 at IP 10: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 11 at IP 11: LoadVar
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 12 at IP 12: Pop
[Debug][Hint] interpreter\vm.zig:738:0: DBG VM: executing instruction 13 at IP 13: Halt

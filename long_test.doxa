// Atomic type arrays
var explicit_int_array :: int[] is [1, 2, 3];
var explicit_sized_int_array :: int[3] is [4, 5, 6];
var implicit_int_array is [7, 8, 9];
var unit_int_array :: int[]; // []
var explicit_byte_array :: byte[] is [0x00, 0x01, 0x02];
var explicit_sized_byte_array :: byte[3] is [0x03, 0x04, 0x05];
var implicit_byte_array is [0x06, 0x07, 0x08];
var unit_byte_array :: byte[]; // []
var explicit_float_array :: float[] is [1.0, 2.0, 3.0];
var explicit_sized_float_array :: float[3] is [4.0, 5.0, 6.0];
var implicit_float_array is [7.0, 8.0, 9.0];
var unit_float_array :: float[]; // []
var explicit_tetra_array :: tetra[] is [both, false, true];
var explicit_sized_tetra_array :: tetra[3] is [both, false, true];
var implicit_tetra_array is [true, false, both];
var unit_tetra_array :: tetra[]; // []
var explicit_string_array :: string[] is ["foo", "bar", "baz"];
var explicit_sized_string_array :: string[3] is ["qux", "quux", "quuz"];
var implicit_string_array is ["hello", "world", "test"];
var unit_string_array :: string[]; // []

// Const atomic array tests
const const_explicit_int_array :: int[] is [1, 2, 3];
const const_explicit_sized_int_array :: int[3] is [4, 5, 6];
const const_implicit_int_array is [7, 8, 9];
const const_explicit_byte_array :: byte[] is [0x00, 0x01, 0x02];
const const_explicit_sized_byte_array :: byte[3] is [0x03, 0x04, 0x05];
const const_implicit_byte_array is [0x06, 0x07, 0x08];
const const_explicit_float_array :: float[] is [1.0, 2.0, 3.0];
const const_explicit_sized_float_array :: float[3] is [4.0, 5.0, 6.0];
const const_implicit_float_array is [7.0, 8.0, 9.0];
const const_explicit_tetra_array :: tetra[] is [both, false, true];
const const_explicit_sized_tetra_array :: tetra[3] is [both, false, true];
const const_implicit_tetra_array is [true, false, both];
const const_explicit_string_array :: string[] is ["foo", "bar", "baz"];
const const_explicit_sized_string_array :: string[3] is ["qux", "quux", "quuz"];
const const_implicit_string_array is ["hello", "world", "test"];

enum Color {
    Red,
    Green,
    Blue,
}

enum Stoplight {
    Red,
    Yellow,
    Green,
}

const const_enum_red :: Color is .Red;
const const_enum_green :: Color is .Green;
const const_enum_blue :: Color is .Blue;

// Test match expressions with different enum values
var int_from_map is match const_enum_red {
    .Red => "one",
    .Green => "two",
    .Blue => "three",
}

var int_from_map_green is match const_enum_green {
    .Red => "one",
    .Green => "two",
    .Blue => "three",
}

var int_from_map_blue is match const_enum_blue {
    .Red => "one",
    .Green => "two",
    .Blue => "three",
}

// Test match with different return types
var string_from_map is match const_enum_red {
    .Red => "red",
    .Green => "green", 
    .Blue => "blue",
}

var number_from_map is match const_enum_green {
    .Red => 1,
    .Green => 2,
    .Blue => 3,
}

var else_int_from_map is match const_enum_green {
    .Red => 1,
    .Green => 2,
    else => 3,
}

var else_string_from_map is match const_enum_green {
    .Red => "one",
    else => "two or three",
}



// Test match with Stoplight enum
const stoplight_red :: Stoplight is .Red;
const stoplight_yellow :: Stoplight is .Yellow;
const stoplight_green :: Stoplight is .Green;

var stoplight_action is match stoplight_red {
    .Red => "stop",
    .Yellow => "slow",
    .Green => "go",
}

var stoplight_action_yellow is match stoplight_yellow {
    .Red => "stop",
    .Yellow => "slow", 
    .Green => "go",
}

var stoplight_action_green is match stoplight_green {
    .Red => "stop",
    .Yellow => "slow",
    .Green => "go",
}

// When type is explicitly specified, short form works
var explicit_enum_array :: Color[] is [.Red, .Green, .Blue];
var explicit_sized_enum_array :: Color[3] is [.Blue, .Red, .Green];
var unit_enum_array :: Color[]; // []

// When type is not specified, full qualification needed
var implicit_enum_array is [Color.Green, Color.Blue, Color.Red];

// Const versions - unit arrays get default empty array
const const_explicit_enum_array :: Color[] is [.Red, .Green, .Blue];
const const_explicit_sized_enum_array :: Color[3] is [.Blue, .Red, .Green];
const const_implicit_enum_array is [Color.Green, Color.Blue, Color.Red];

// Mixed enum arrays (need full qualification)
var mixed_enum_array is [Color.Red, Stoplight.Yellow, Color.Blue];
const const_mixed_enum_array is [Color.Red, Stoplight.Yellow, Color.Blue];

struct Person {
    name :: string,
    age :: int,
}

var explicit_struct_array :: Person[] is [
    Person { name is "Alice", age is 25 },
    Person { name is "Bob", age is 30 },
    Person { name is "Charlie", age is 35 }
];
var explicit_sized_struct_array :: Person[3] is [
    Person { name is "David", age is 40 },
    Person { name is "Eve", age is 45 },
    Person { name is "Frank", age is 50 }
];
var implicit_struct_array is [
    Person { name is "Grace", age is 55 },
    Person { name is "Henry", age is 60 },
    Person { name is "Ivy", age is 65 }
];
var unit_struct_array :: Person[]; // []

const const_explicit_struct_array :: Person[] is [
    Person { name is "Alice", age is 25 },
    Person { name is "Bob", age is 30 },
    Person { name is "Charlie", age is 35 }
];
const const_explicit_sized_struct_array :: Person[3] is [
    Person { name is "David", age is 40 },
    Person { name is "Eve", age is 45 },
    Person { name is "Frank", age is 50 }
];
const const_implicit_struct_array is [
    Person { name is "Grace", age is 55 },
    Person { name is "Henry", age is 60 },
    Person { name is "Ivy", age is 65 }
];

var Bob is Person { name is "Bob", age is 25 };

var int_struct_array is [1, 2, Bob.age];

var struct_array is [
    Person { name is "Grace", age is 55 },
    Bob
];

// Nested arrays (arrays of arrays)
var nested_int_array :: int[][] is [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
var nested_string_array :: string[][] is [["hello", "world"], ["foo", "bar"]];
var nested_tetra_array :: tetra[][] is [[true, false, both], [false, true, both]];
var nested_float_array :: float[][] is [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]];
var nested_byte_array :: byte[][] is [[0x00, 0x01, 0x02], [0x03, 0x04, 0x05]];
var nested_enum_array :: Color[][] is [[.Red, .Green], [.Blue, .Red]];
var nested_struct_array :: Person[][] is [
    [Person { name is "Grace", age is 55 }, Person { name is "Henry", age is 60 }],
    [Bob]
];

const const_nested_int_array :: int[][] is [[1, 2, 3], [4, 5, 6], [7, 8, 9]];

// Empty arrays of different types
var empty_int_array :: int[] is [];
var empty_string_array :: string[] is [];
var empty_struct_array :: Person[] is [];
var empty_enum_array :: Color[] is [];
